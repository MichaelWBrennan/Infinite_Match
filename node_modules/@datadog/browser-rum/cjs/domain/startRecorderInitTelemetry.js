"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startRecorderInitTelemetry = startRecorderInitTelemetry;
const browser_core_1 = require("@datadog/browser-core");
function startRecorderInitTelemetry(telemetry, observable) {
    if (!telemetry.metricsEnabled) {
        return { stop: browser_core_1.noop };
    }
    let startContext;
    let documentReadyDuration;
    let recorderSettledDuration;
    const { unsubscribe } = observable.subscribe((event) => {
        switch (event.type) {
            case 'start':
                startContext = { forced: event.forced, timestamp: (0, browser_core_1.timeStampNow)() };
                documentReadyDuration = undefined;
                recorderSettledDuration = undefined;
                break;
            case 'document-ready':
                if (startContext) {
                    documentReadyDuration = (0, browser_core_1.elapsed)(startContext.timestamp, (0, browser_core_1.timeStampNow)());
                }
                break;
            case 'recorder-settled':
                if (startContext) {
                    recorderSettledDuration = (0, browser_core_1.elapsed)(startContext.timestamp, (0, browser_core_1.timeStampNow)());
                }
                break;
            case 'aborted':
            case 'deflate-encoder-load-failed':
            case 'recorder-load-failed':
            case 'succeeded':
                // Only send metrics for the first attempt at starting the recorder.
                unsubscribe();
                if (startContext) {
                    // monitor-until: 2026-07-01
                    (0, browser_core_1.addTelemetryMetrics)("Recorder init metrics" /* TelemetryMetrics.RECORDER_INIT_METRICS_TELEMETRY_NAME */, {
                        metrics: createRecorderInitMetrics(startContext.forced, recorderSettledDuration, (0, browser_core_1.elapsed)(startContext.timestamp, (0, browser_core_1.timeStampNow)()), event.type, documentReadyDuration),
                    });
                }
                break;
        }
    });
    return { stop: unsubscribe };
}
function createRecorderInitMetrics(forced, loadRecorderModuleDuration, recorderInitDuration, result, waitForDocReadyDuration) {
    return {
        forced,
        loadRecorderModuleDuration,
        recorderInitDuration,
        result,
        waitForDocReadyDuration,
    };
}
//# sourceMappingURL=startRecorderInitTelemetry.js.map