"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assembleProfilingPayload = assembleProfilingPayload;
const browser_core_1 = require("@datadog/browser-core");
const buildProfileEventAttributes_1 = require("./buildProfileEventAttributes");
function assembleProfilingPayload(profilerTrace, configuration, sessionId) {
    const event = buildProfileEvent(profilerTrace, configuration, sessionId);
    return {
        event,
        'wall-time.json': profilerTrace,
    };
}
function buildProfileEvent(profilerTrace, configuration, sessionId) {
    const tags = (0, browser_core_1.buildTags)(configuration); // TODO: get that from the tagContext hook
    const profileAttributes = (0, buildProfileEventAttributes_1.buildProfileEventAttributes)(profilerTrace, configuration.applicationId, sessionId);
    const profileEventTags = buildProfileEventTags(tags);
    const profileEvent = {
        ...profileAttributes,
        attachments: ['wall-time.json'],
        start: new Date(profilerTrace.startClocks.timeStamp).toISOString(),
        end: new Date(profilerTrace.endClocks.timeStamp).toISOString(),
        family: 'chrome',
        runtime: 'chrome',
        format: 'json',
        version: 4, // Ingestion event version (not the version application tag)
        tags_profiler: profileEventTags.join(','),
        _dd: {
            clock_drift: (0, browser_core_1.currentDrift)(),
        },
    };
    return profileEvent;
}
/**
 * Builds tags for the Profile Event.
 *
 * @param tags - RUM tags
 * @returns Combined tags for the Profile Event.
 */
function buildProfileEventTags(tags) {
    // Tags already contains the common tags for all events. (service, env, version, etc.)
    // Here we are adding some specific-to-profiling tags.
    const profileEventTags = tags.concat(['language:javascript', 'runtime:chrome', 'family:chrome', 'host:browser']);
    return profileEventTags;
}
//# sourceMappingURL=assembly.js.map