"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackMove = trackMove;
exports.tryToComputeCoordinates = tryToComputeCoordinates;
const browser_core_1 = require("@datadog/browser-core");
const types_1 = require("../../../types");
const eventsUtils_1 = require("../eventsUtils");
const viewports_1 = require("../viewports");
const assembly_1 = require("../assembly");
const MOUSE_MOVE_OBSERVER_THRESHOLD = 50;
function trackMove(configuration, scope, moveCb) {
    const { throttled: updatePosition, cancel: cancelThrottle } = (0, browser_core_1.throttle)((event) => {
        const target = (0, eventsUtils_1.getEventTarget)(event);
        const id = scope.nodeIds.get(target);
        if (id === undefined) {
            return;
        }
        const coordinates = tryToComputeCoordinates(event);
        if (!coordinates) {
            return;
        }
        const position = {
            id,
            timeOffset: 0,
            x: coordinates.x,
            y: coordinates.y,
        };
        moveCb((0, assembly_1.assembleIncrementalSnapshot)((0, eventsUtils_1.isTouchEvent)(event) ? types_1.IncrementalSource.TouchMove : types_1.IncrementalSource.MouseMove, { positions: [position] }));
    }, MOUSE_MOVE_OBSERVER_THRESHOLD, {
        trailing: false,
    });
    const { stop: removeListener } = (0, browser_core_1.addEventListeners)(configuration, document, ["mousemove" /* DOM_EVENT.MOUSE_MOVE */, "touchmove" /* DOM_EVENT.TOUCH_MOVE */], updatePosition, {
        capture: true,
        passive: true,
    });
    return {
        stop: () => {
            removeListener();
            cancelThrottle();
        },
    };
}
function tryToComputeCoordinates(event) {
    let { clientX: x, clientY: y } = (0, eventsUtils_1.isTouchEvent)(event) ? event.changedTouches[0] : event;
    if (window.visualViewport) {
        const { visualViewportX, visualViewportY } = (0, viewports_1.convertMouseEventToLayoutCoordinates)(x, y);
        x = visualViewportX;
        y = visualViewportY;
    }
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
        return undefined;
    }
    return { x, y };
}
//# sourceMappingURL=trackMove.js.map