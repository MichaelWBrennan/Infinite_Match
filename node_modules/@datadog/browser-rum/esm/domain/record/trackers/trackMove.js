import { addEventListeners, throttle } from '@datadog/browser-core';
import { IncrementalSource } from '../../../types';
import { getEventTarget, isTouchEvent } from '../eventsUtils';
import { convertMouseEventToLayoutCoordinates } from '../viewports';
import { assembleIncrementalSnapshot } from '../assembly';
const MOUSE_MOVE_OBSERVER_THRESHOLD = 50;
export function trackMove(configuration, scope, moveCb) {
    const { throttled: updatePosition, cancel: cancelThrottle } = throttle((event) => {
        const target = getEventTarget(event);
        const id = scope.nodeIds.get(target);
        if (id === undefined) {
            return;
        }
        const coordinates = tryToComputeCoordinates(event);
        if (!coordinates) {
            return;
        }
        const position = {
            id,
            timeOffset: 0,
            x: coordinates.x,
            y: coordinates.y,
        };
        moveCb(assembleIncrementalSnapshot(isTouchEvent(event) ? IncrementalSource.TouchMove : IncrementalSource.MouseMove, { positions: [position] }));
    }, MOUSE_MOVE_OBSERVER_THRESHOLD, {
        trailing: false,
    });
    const { stop: removeListener } = addEventListeners(configuration, document, ["mousemove" /* DOM_EVENT.MOUSE_MOVE */, "touchmove" /* DOM_EVENT.TOUCH_MOVE */], updatePosition, {
        capture: true,
        passive: true,
    });
    return {
        stop: () => {
            removeListener();
            cancelThrottle();
        },
    };
}
export function tryToComputeCoordinates(event) {
    let { clientX: x, clientY: y } = isTouchEvent(event) ? event.changedTouches[0] : event;
    if (window.visualViewport) {
        const { visualViewportX, visualViewportY } = convertMouseEventToLayoutCoordinates(x, y);
        x = visualViewportX;
        y = visualViewportY;
    }
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
        return undefined;
    }
    return { x, y };
}
//# sourceMappingURL=trackMove.js.map