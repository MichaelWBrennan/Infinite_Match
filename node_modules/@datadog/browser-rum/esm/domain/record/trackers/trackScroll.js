import { throttle, addEventListener } from '@datadog/browser-core';
import { getScrollX, getScrollY, getNodePrivacyLevel, NodePrivacyLevel } from '@datadog/browser-rum-core';
import { getEventTarget } from '../eventsUtils';
import { IncrementalSource } from '../../../types';
import { assembleIncrementalSnapshot } from '../assembly';
const SCROLL_OBSERVER_THRESHOLD = 100;
export function trackScroll(configuration, scope, scrollCb, elementsScrollPositions, target = document) {
    const { throttled: updatePosition, cancel: cancelThrottle } = throttle((event) => {
        const target = getEventTarget(event);
        if (!target) {
            return;
        }
        const id = scope.nodeIds.get(target);
        if (id === undefined ||
            getNodePrivacyLevel(target, configuration.defaultPrivacyLevel) === NodePrivacyLevel.HIDDEN) {
            return;
        }
        const scrollPositions = target === document
            ? {
                scrollTop: getScrollY(),
                scrollLeft: getScrollX(),
            }
            : {
                scrollTop: Math.round(target.scrollTop),
                scrollLeft: Math.round(target.scrollLeft),
            };
        elementsScrollPositions.set(target, scrollPositions);
        scrollCb(assembleIncrementalSnapshot(IncrementalSource.Scroll, {
            id,
            x: scrollPositions.scrollLeft,
            y: scrollPositions.scrollTop,
        }));
    }, SCROLL_OBSERVER_THRESHOLD);
    const { stop: removeListener } = addEventListener(configuration, target, "scroll" /* DOM_EVENT.SCROLL */, updatePosition, {
        capture: true,
        passive: true,
    });
    return {
        stop: () => {
            removeListener();
            cancelThrottle();
        },
    };
}
//# sourceMappingURL=trackScroll.js.map