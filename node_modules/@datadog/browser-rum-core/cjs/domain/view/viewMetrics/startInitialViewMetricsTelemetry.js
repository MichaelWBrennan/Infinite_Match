"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startInitialViewMetricsTelemetry = startInitialViewMetricsTelemetry;
const browser_core_1 = require("@datadog/browser-core");
function startInitialViewMetricsTelemetry(lifeCycle, telemetry) {
    if (!telemetry.metricsEnabled) {
        return { stop: browser_core_1.noop };
    }
    const { unsubscribe } = lifeCycle.subscribe(4 /* LifeCycleEventType.VIEW_UPDATED */, ({ initialViewMetrics }) => {
        if (!initialViewMetrics.largestContentfulPaint || !initialViewMetrics.navigationTimings) {
            return;
        }
        // The navigation timings become available shortly after the load event fires, so
        // we're snapshotting the LCP value available at that point. However, more LCP values
        // can be emitted until the page is scrolled or interacted with, so it's possible that
        // the final LCP value may differ. These metrics are intended to help diagnose
        // performance issues early in the page load process, and using LCP-at-page-load is a
        // good fit for that use case, but it's important to be aware that this is not
        // necessarily equivalent to the normal LCP metric.
        // monitor-until: 2026-07-01
        (0, browser_core_1.addTelemetryMetrics)("Initial view metrics" /* TelemetryMetrics.INITIAL_VIEW_METRICS_TELEMETRY_NAME */, {
            metrics: createCoreInitialViewMetrics(initialViewMetrics.largestContentfulPaint, initialViewMetrics.navigationTimings),
        });
        unsubscribe();
    });
    return {
        stop: unsubscribe,
    };
}
function createCoreInitialViewMetrics(lcp, navigation) {
    return {
        lcp: {
            value: lcp.value,
        },
        navigation: {
            domComplete: navigation.domComplete,
            domContentLoaded: navigation.domContentLoaded,
            domInteractive: navigation.domInteractive,
            firstByte: navigation.firstByte,
            loadEvent: navigation.loadEvent,
        },
    };
}
//# sourceMappingURL=startInitialViewMetricsTelemetry.js.map