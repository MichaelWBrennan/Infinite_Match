import { createBatch, createFlushController, createHttpRequest } from '@datadog/browser-core';
import { RumEventType } from '../rawRumEvent.types';
export function startRumBatch(configuration, lifeCycle, reportError, pageMayExitObservable, sessionExpireObservable, createEncoder) {
    const endpoints = [configuration.rumEndpointBuilder];
    if (configuration.replica) {
        endpoints.push(configuration.replica.rumEndpointBuilder);
    }
    const batch = createBatch({
        encoder: createEncoder(2 /* DeflateEncoderStreamId.RUM */),
        request: createHttpRequest(endpoints, configuration.batchBytesLimit, reportError),
        flushController: createFlushController({
            messagesLimit: configuration.batchMessagesLimit,
            bytesLimit: configuration.batchBytesLimit,
            durationLimit: configuration.flushTimeout,
            pageMayExitObservable,
            sessionExpireObservable,
        }),
        messageBytesLimit: configuration.messageBytesLimit,
    });
    lifeCycle.subscribe(13 /* LifeCycleEventType.RUM_EVENT_COLLECTED */, (serverRumEvent) => {
        if (serverRumEvent.type === RumEventType.VIEW) {
            batch.upsert(serverRumEvent, serverRumEvent.view.id);
        }
        else {
            batch.add(serverRumEvent);
        }
    });
    return batch;
}
//# sourceMappingURL=startRumBatch.js.map