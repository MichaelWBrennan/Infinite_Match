import { clocksNow, combine, elapsed, ExperimentalFeature, generateUUID, isExperimentalFeatureEnabled, sanitize, toServerDuration, } from '@datadog/browser-core';
import { RumEventType, VitalType } from '../../rawRumEvent.types';
export function createCustomVitalsState() {
    const vitalsByName = new Map();
    const vitalsByReference = new WeakMap();
    return { vitalsByName, vitalsByReference };
}
export function startVitalCollection(lifeCycle, pageStateHistory, customVitalsState) {
    function isValid(vital) {
        return !pageStateHistory.wasInPageStateDuringPeriod("frozen" /* PageState.FROZEN */, vital.startClocks.relative, vital.duration);
    }
    function addDurationVital(vital) {
        if (isValid(vital)) {
            lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, processVital(vital));
        }
    }
    function addOperationStepVital(name, stepType, options, failureReason) {
        if (!isExperimentalFeatureEnabled(ExperimentalFeature.FEATURE_OPERATION_VITAL)) {
            return;
        }
        const { operationKey, context, description } = options || {};
        const vital = {
            name,
            type: VitalType.OPERATION_STEP,
            operationKey,
            failureReason,
            stepType,
            startClocks: clocksNow(),
            context: sanitize(context),
            description,
        };
        lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, processVital(vital));
    }
    return {
        addOperationStepVital,
        addDurationVital,
        startDurationVital: (name, options = {}) => startDurationVital(customVitalsState, name, options),
        stopDurationVital: (nameOrRef, options = {}) => {
            stopDurationVital(addDurationVital, customVitalsState, nameOrRef, options);
        },
    };
}
export function startDurationVital({ vitalsByName, vitalsByReference }, name, options = {}) {
    const vital = {
        name,
        startClocks: clocksNow(),
        ...options,
    };
    // To avoid leaking implementation details of the vital, we return a reference to it.
    const reference = { __dd_vital_reference: true };
    vitalsByName.set(name, vital);
    // To avoid memory leaks caused by the creation of numerous references (e.g., from improper useEffect implementations), we use a WeakMap.
    vitalsByReference.set(reference, vital);
    return reference;
}
export function stopDurationVital(stopCallback, { vitalsByName, vitalsByReference }, nameOrRef, options = {}) {
    const vitalStart = typeof nameOrRef === 'string' ? vitalsByName.get(nameOrRef) : vitalsByReference.get(nameOrRef);
    if (!vitalStart) {
        return;
    }
    stopCallback(buildDurationVital(vitalStart, vitalStart.startClocks, options, clocksNow()));
    if (typeof nameOrRef === 'string') {
        vitalsByName.delete(nameOrRef);
    }
    else {
        vitalsByReference.delete(nameOrRef);
    }
}
function buildDurationVital(vitalStart, startClocks, stopOptions, stopClocks) {
    var _a;
    return {
        name: vitalStart.name,
        type: VitalType.DURATION,
        startClocks,
        duration: elapsed(startClocks.timeStamp, stopClocks.timeStamp),
        context: combine(vitalStart.context, stopOptions.context),
        description: (_a = stopOptions.description) !== null && _a !== void 0 ? _a : vitalStart.description,
    };
}
function processVital(vital) {
    const { startClocks, type, name, description, context } = vital;
    const vitalData = {
        id: generateUUID(),
        type,
        name,
        description,
        ...(type === VitalType.DURATION
            ? { duration: toServerDuration(vital.duration) }
            : {
                step_type: vital.stepType,
                operation_key: vital.operationKey,
                failure_reason: vital.failureReason,
            }),
    };
    return {
        rawRumEvent: {
            date: startClocks.timeStamp,
            vital: vitalData,
            type: RumEventType.VITAL,
            context,
        },
        startTime: startClocks.relative,
        duration: type === VitalType.DURATION ? vital.duration : undefined,
        domainContext: {},
    };
}
//# sourceMappingURL=vitalCollection.js.map