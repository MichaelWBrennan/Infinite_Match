import { matchList, ONE_KIBI_BYTE, safeTruncate } from '@datadog/browser-core';
/**
 * arbitrary value, byte precision not needed
 */
const GRAPHQL_PAYLOAD_LIMIT = 32 * ONE_KIBI_BYTE;
export function findGraphQlConfiguration(url, configuration) {
    return configuration.allowedGraphQlUrls.find((graphQlOption) => matchList([graphQlOption.match], url));
}
export function extractGraphQlMetadata(requestBody, trackPayload = false) {
    if (!requestBody || typeof requestBody !== 'string') {
        return;
    }
    let graphqlBody;
    try {
        graphqlBody = JSON.parse(requestBody);
    }
    catch (_a) {
        // Not valid JSON
        return;
    }
    if (!graphqlBody || !graphqlBody.query) {
        return;
    }
    const query = graphqlBody.query.trim();
    const operationType = getOperationType(query);
    const operationName = graphqlBody.operationName;
    if (!operationType) {
        return;
    }
    let variables;
    if (graphqlBody.variables) {
        variables = JSON.stringify(graphqlBody.variables);
    }
    return {
        operationType,
        operationName,
        variables,
        payload: trackPayload ? safeTruncate(query, GRAPHQL_PAYLOAD_LIMIT, '...') : undefined,
    };
}
function getOperationType(query) {
    var _a;
    return (_a = query.match(/^\s*(query|mutation|subscription)\b/i)) === null || _a === void 0 ? void 0 : _a[1];
}
//# sourceMappingURL=graphql.js.map