import { createBatch, createFlushController, createHttpRequest, createIdentityEncoder } from '@datadog/browser-core';
export function startLogsBatch(configuration, lifeCycle, reportError, pageMayExitObservable, session) {
    const endpoints = [configuration.logsEndpointBuilder];
    if (configuration.replica) {
        endpoints.push(configuration.replica.logsEndpointBuilder);
    }
    const batch = createBatch({
        encoder: createIdentityEncoder(),
        request: createHttpRequest(endpoints, configuration.batchBytesLimit, reportError),
        flushController: createFlushController({
            messagesLimit: configuration.batchMessagesLimit,
            bytesLimit: configuration.batchBytesLimit,
            durationLimit: configuration.flushTimeout,
            pageMayExitObservable,
            sessionExpireObservable: session.expireObservable,
        }),
        messageBytesLimit: configuration.messageBytesLimit,
    });
    lifeCycle.subscribe(1 /* LifeCycleEventType.LOG_COLLECTED */, (serverLogsEvent) => {
        batch.add(serverLogsEvent);
    });
    return batch;
}
//# sourceMappingURL=startLogsBatch.js.map