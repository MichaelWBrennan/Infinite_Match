"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXTENSION_PREFIXES = void 0;
exports.containsExtensionUrl = containsExtensionUrl;
exports.isUnsupportedExtensionEnvironment = isUnsupportedExtensionEnvironment;
exports.EXTENSION_PREFIXES = ['chrome-extension://', 'moz-extension://'];
function containsExtensionUrl(str) {
    return exports.EXTENSION_PREFIXES.some((prefix) => str.includes(prefix));
}
/**
 * Utility function to detect if the SDK is being initialized in an unsupported browser extension environment.
 *
 * @param windowLocation - The current window location to check
 * @param stack - The error stack to check for extension URLs
 * @returns true if running in an unsupported browser extension environment
 */
function isUnsupportedExtensionEnvironment(windowLocation, stack = '') {
    // If the page itself is an extension page.
    if (containsExtensionUrl(windowLocation)) {
        return false;
    }
    // Since we generate the error on the init, we check the 2nd frame line.
    const frameLines = stack.split('\n').filter((line) => {
        const trimmedLine = line.trim();
        return trimmedLine.length && /^at\s+|@/.test(trimmedLine);
    });
    const target = frameLines[1] || '';
    return containsExtensionUrl(target);
}
//# sourceMappingURL=extensionUtils.js.map