/**
 * inspired by https://mathiasbynens.be/notes/globalthis
 */
interface WorkerGlobalScope {
    empty: never;
}
type Without<T, U> = {
    [P in Exclude<keyof T, keyof U>]?: never;
};
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
export type GlobalObject = XOR<Window, WorkerGlobalScope>;
export declare function getGlobalObject<T = typeof globalThis>(): T;
/**
 * Cached reference to the global object so it can be imported and re-used without
 * re-evaluating the heavyweight fallback logic in `getGlobalObject()`.
 */
export declare const globalObject: (Without<Window, WorkerGlobalScope> & WorkerGlobalScope) | (Without<WorkerGlobalScope, Window> & Window);
export declare const isWorkerEnvironment: boolean;
export {};
