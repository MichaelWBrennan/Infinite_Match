import { INTAKE_SITE_US1, INTAKE_URL_PARAMETERS } from '../intakeSites';
import { createEndpointBuilder } from './endpointBuilder';
export function computeTransportConfiguration(initConfiguration) {
    const site = initConfiguration.site || INTAKE_SITE_US1;
    const source = validateSource(initConfiguration.source);
    const endpointBuilders = computeEndpointBuilders({ ...initConfiguration, site, source });
    const replicaConfiguration = computeReplicaConfiguration({ ...initConfiguration, site, source });
    return {
        replica: replicaConfiguration,
        site,
        source,
        ...endpointBuilders,
    };
}
function validateSource(source) {
    if (source === 'flutter' || source === 'unity') {
        return source;
    }
    return 'browser';
}
function computeEndpointBuilders(initConfiguration) {
    return {
        logsEndpointBuilder: createEndpointBuilder(initConfiguration, 'logs'),
        rumEndpointBuilder: createEndpointBuilder(initConfiguration, 'rum'),
        profilingEndpointBuilder: createEndpointBuilder(initConfiguration, 'profile'),
        sessionReplayEndpointBuilder: createEndpointBuilder(initConfiguration, 'replay'),
        exposuresEndpointBuilder: createEndpointBuilder(initConfiguration, 'exposures'),
    };
}
function computeReplicaConfiguration(initConfiguration) {
    if (!initConfiguration.replica) {
        return;
    }
    const replicaConfiguration = {
        ...initConfiguration,
        site: INTAKE_SITE_US1,
        clientToken: initConfiguration.replica.clientToken,
    };
    return {
        logsEndpointBuilder: createEndpointBuilder(replicaConfiguration, 'logs'),
        rumEndpointBuilder: createEndpointBuilder(replicaConfiguration, 'rum', [
            `application.id=${initConfiguration.replica.applicationId}`,
        ]),
    };
}
export function isIntakeUrl(url) {
    // check if tags is present in the query string
    return INTAKE_URL_PARAMETERS.every((param) => url.includes(param));
}
//# sourceMappingURL=transportConfiguration.js.map