'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sns",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class SNSClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultSNSHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class SNSServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SNSServiceException.prototype);
    }
}

class AuthorizationErrorException extends SNSServiceException {
    name = "AuthorizationErrorException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AuthorizationErrorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AuthorizationErrorException.prototype);
    }
}
class InternalErrorException extends SNSServiceException {
    name = "InternalErrorException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalErrorException.prototype);
    }
}
class InvalidParameterException extends SNSServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
class NotFoundException extends SNSServiceException {
    name = "NotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
class ThrottledException extends SNSServiceException {
    name = "ThrottledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottledException.prototype);
    }
}
class FilterPolicyLimitExceededException extends SNSServiceException {
    name = "FilterPolicyLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "FilterPolicyLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, FilterPolicyLimitExceededException.prototype);
    }
}
class ReplayLimitExceededException extends SNSServiceException {
    name = "ReplayLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ReplayLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ReplayLimitExceededException.prototype);
    }
}
class SubscriptionLimitExceededException extends SNSServiceException {
    name = "SubscriptionLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SubscriptionLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SubscriptionLimitExceededException.prototype);
    }
}
const LanguageCodeString = {
    de_DE: "de-DE",
    en_GB: "en-GB",
    en_US: "en-US",
    es_419: "es-419",
    es_ES: "es-ES",
    fr_CA: "fr-CA",
    fr_FR: "fr-FR",
    it_IT: "it-IT",
    jp_JP: "ja-JP",
    kr_KR: "kr-KR",
    pt_BR: "pt-BR",
    zh_CN: "zh-CN",
    zh_TW: "zh-TW",
};
class OptedOutException extends SNSServiceException {
    name = "OptedOutException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OptedOutException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OptedOutException.prototype);
    }
}
class UserErrorException extends SNSServiceException {
    name = "UserErrorException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserErrorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserErrorException.prototype);
    }
}
class ConcurrentAccessException extends SNSServiceException {
    name = "ConcurrentAccessException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentAccessException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentAccessException.prototype);
    }
}
class InvalidSecurityException extends SNSServiceException {
    name = "InvalidSecurityException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSecurityException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSecurityException.prototype);
    }
}
class StaleTagException extends SNSServiceException {
    name = "StaleTagException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "StaleTagException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StaleTagException.prototype);
    }
}
class TagLimitExceededException extends SNSServiceException {
    name = "TagLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TagLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TagLimitExceededException.prototype);
    }
}
class TagPolicyException extends SNSServiceException {
    name = "TagPolicyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TagPolicyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TagPolicyException.prototype);
    }
}
class TopicLimitExceededException extends SNSServiceException {
    name = "TopicLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TopicLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TopicLimitExceededException.prototype);
    }
}
class ResourceNotFoundException extends SNSServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class InvalidStateException extends SNSServiceException {
    name = "InvalidStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidStateException.prototype);
    }
}
const NumberCapability = {
    MMS: "MMS",
    SMS: "SMS",
    VOICE: "VOICE",
};
const RouteType = {
    Premium: "Premium",
    Promotional: "Promotional",
    Transactional: "Transactional",
};
class ValidationException extends SNSServiceException {
    name = "ValidationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
const SMSSandboxPhoneNumberVerificationStatus = {
    Pending: "Pending",
    Verified: "Verified",
};
class EndpointDisabledException extends SNSServiceException {
    name = "EndpointDisabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "EndpointDisabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, EndpointDisabledException.prototype);
    }
}
class InvalidParameterValueException extends SNSServiceException {
    name = "InvalidParameterValueException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
    }
}
class KMSAccessDeniedException extends SNSServiceException {
    name = "KMSAccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSAccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSAccessDeniedException.prototype);
    }
}
class KMSDisabledException extends SNSServiceException {
    name = "KMSDisabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSDisabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSDisabledException.prototype);
    }
}
class KMSInvalidStateException extends SNSServiceException {
    name = "KMSInvalidStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSInvalidStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSInvalidStateException.prototype);
    }
}
class KMSNotFoundException extends SNSServiceException {
    name = "KMSNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSNotFoundException.prototype);
    }
}
class KMSOptInRequired extends SNSServiceException {
    name = "KMSOptInRequired";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSOptInRequired",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSOptInRequired.prototype);
    }
}
class KMSThrottlingException extends SNSServiceException {
    name = "KMSThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSThrottlingException.prototype);
    }
}
class PlatformApplicationDisabledException extends SNSServiceException {
    name = "PlatformApplicationDisabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PlatformApplicationDisabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PlatformApplicationDisabledException.prototype);
    }
}
class BatchEntryIdsNotDistinctException extends SNSServiceException {
    name = "BatchEntryIdsNotDistinctException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BatchEntryIdsNotDistinctException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BatchEntryIdsNotDistinctException.prototype);
    }
}
class BatchRequestTooLongException extends SNSServiceException {
    name = "BatchRequestTooLongException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BatchRequestTooLongException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BatchRequestTooLongException.prototype);
    }
}
class EmptyBatchRequestException extends SNSServiceException {
    name = "EmptyBatchRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "EmptyBatchRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, EmptyBatchRequestException.prototype);
    }
}
class InvalidBatchEntryIdException extends SNSServiceException {
    name = "InvalidBatchEntryIdException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidBatchEntryIdException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidBatchEntryIdException.prototype);
    }
}
class TooManyEntriesInBatchRequestException extends SNSServiceException {
    name = "TooManyEntriesInBatchRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyEntriesInBatchRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyEntriesInBatchRequestException.prototype);
    }
}
class VerificationException extends SNSServiceException {
    name = "VerificationException";
    $fault = "client";
    Message;
    Status;
    constructor(opts) {
        super({
            name: "VerificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, VerificationException.prototype);
        this.Message = opts.Message;
        this.Status = opts.Status;
    }
}
const CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.phoneNumber && { phoneNumber: smithyClient.SENSITIVE_STRING }),
});
const CreateSMSSandboxPhoneNumberInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: smithyClient.SENSITIVE_STRING }),
});
const DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: smithyClient.SENSITIVE_STRING }),
});
const PhoneNumberInformationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: smithyClient.SENSITIVE_STRING }),
});
const ListOriginationNumbersResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumbers && {
        PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberInformationFilterSensitiveLog(item)),
    }),
});
const ListPhoneNumbersOptedOutResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.phoneNumbers && { phoneNumbers: smithyClient.SENSITIVE_STRING }),
});
const SMSSandboxPhoneNumberFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: smithyClient.SENSITIVE_STRING }),
});
const ListSMSSandboxPhoneNumbersResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumbers && {
        PhoneNumbers: obj.PhoneNumbers.map((item) => SMSSandboxPhoneNumberFilterSensitiveLog(item)),
    }),
});
const OptInPhoneNumberInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.phoneNumber && { phoneNumber: smithyClient.SENSITIVE_STRING }),
});
const PublishInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: smithyClient.SENSITIVE_STRING }),
});
const VerifySMSSandboxPhoneNumberInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: smithyClient.SENSITIVE_STRING }),
});

const se_AddPermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AddPermissionInput(input),
        [_A]: _AP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CheckIfPhoneNumberIsOptedOutCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CheckIfPhoneNumberIsOptedOutInput(input),
        [_A]: _CIPNIOO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ConfirmSubscriptionInput(input),
        [_A]: _CS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePlatformApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePlatformApplicationInput(input),
        [_A]: _CPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePlatformEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePlatformEndpointInput(input),
        [_A]: _CPE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSMSSandboxPhoneNumberCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSMSSandboxPhoneNumberInput(input),
        [_A]: _CSMSSPN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTopicCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTopicInput(input),
        [_A]: _CT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteEndpointInput(input),
        [_A]: _DE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePlatformApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePlatformApplicationInput(input),
        [_A]: _DPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSMSSandboxPhoneNumberCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSMSSandboxPhoneNumberInput(input),
        [_A]: _DSMSSPN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTopicCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTopicInput(input),
        [_A]: _DT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDataProtectionPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetDataProtectionPolicyInput(input),
        [_A]: _GDPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetEndpointAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetEndpointAttributesInput(input),
        [_A]: _GEA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPlatformApplicationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetPlatformApplicationAttributesInput(input),
        [_A]: _GPAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSMSAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSMSAttributesInput(input),
        [_A]: _GSMSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSMSSandboxAccountStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSMSSandboxAccountStatusInput(),
        [_A]: _GSMSSAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSubscriptionAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSubscriptionAttributesInput(input),
        [_A]: _GSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTopicAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTopicAttributesInput(input),
        [_A]: _GTA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEndpointsByPlatformApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListEndpointsByPlatformApplicationInput(input),
        [_A]: _LEBPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOriginationNumbersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListOriginationNumbersRequest(input),
        [_A]: _LON,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPhoneNumbersOptedOutCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPhoneNumbersOptedOutInput(input),
        [_A]: _LPNOO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPlatformApplicationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPlatformApplicationsInput(input),
        [_A]: _LPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSMSSandboxPhoneNumbersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSMSSandboxPhoneNumbersInput(input),
        [_A]: _LSMSSPN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSubscriptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSubscriptionsInput(input),
        [_A]: _LS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSubscriptionsByTopicCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSubscriptionsByTopicInput(input),
        [_A]: _LSBT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTagsForResourceRequest(input),
        [_A]: _LTFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTopicsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTopicsInput(input),
        [_A]: _LT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_OptInPhoneNumberCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_OptInPhoneNumberInput(input),
        [_A]: _OIPN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PublishCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PublishInput(input, context),
        [_A]: _P,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PublishBatchCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PublishBatchInput(input, context),
        [_A]: _PB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDataProtectionPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutDataProtectionPolicyInput(input),
        [_A]: _PDPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RemovePermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RemovePermissionInput(input),
        [_A]: _RP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetEndpointAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetEndpointAttributesInput(input),
        [_A]: _SEA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetPlatformApplicationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetPlatformApplicationAttributesInput(input),
        [_A]: _SPAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetSMSAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetSMSAttributesInput(input),
        [_A]: _SSMSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetSubscriptionAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetSubscriptionAttributesInput(input),
        [_A]: _SSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetTopicAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetTopicAttributesInput(input),
        [_A]: _STA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SubscribeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SubscribeInput(input),
        [_A]: _S,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagResourceRequest(input),
        [_A]: _TR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UnsubscribeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnsubscribeInput(input),
        [_A]: _U,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagResourceRequest(input),
        [_A]: _UR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_VerifySMSSandboxPhoneNumberCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_VerifySMSSandboxPhoneNumberInput(input),
        [_A]: _VSMSSPN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AddPermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CheckIfPhoneNumberIsOptedOutCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CheckIfPhoneNumberIsOptedOutResponse(data.CheckIfPhoneNumberIsOptedOutResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ConfirmSubscriptionResponse(data.ConfirmSubscriptionResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePlatformApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreatePlatformApplicationResponse(data.CreatePlatformApplicationResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePlatformEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateEndpointResponse(data.CreatePlatformEndpointResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSMSSandboxPhoneNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateSMSSandboxPhoneNumberResult(data.CreateSMSSandboxPhoneNumberResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTopicCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTopicResponse(data.CreateTopicResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePlatformApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSMSSandboxPhoneNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteSMSSandboxPhoneNumberResult(data.DeleteSMSSandboxPhoneNumberResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTopicCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_GetDataProtectionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetDataProtectionPolicyResponse(data.GetDataProtectionPolicyResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetEndpointAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetEndpointAttributesResponse(data.GetEndpointAttributesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPlatformApplicationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetPlatformApplicationAttributesResponse(data.GetPlatformApplicationAttributesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSMSAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSMSAttributesResponse(data.GetSMSAttributesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSMSSandboxAccountStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSMSSandboxAccountStatusResult(data.GetSMSSandboxAccountStatusResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSubscriptionAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSubscriptionAttributesResponse(data.GetSubscriptionAttributesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTopicAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTopicAttributesResponse(data.GetTopicAttributesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEndpointsByPlatformApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointsByPlatformApplicationResponse(data.ListEndpointsByPlatformApplicationResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOriginationNumbersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListOriginationNumbersResult(data.ListOriginationNumbersResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPhoneNumbersOptedOutCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListPhoneNumbersOptedOutResponse(data.ListPhoneNumbersOptedOutResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPlatformApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListPlatformApplicationsResponse(data.ListPlatformApplicationsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSMSSandboxPhoneNumbersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSMSSandboxPhoneNumbersResult(data.ListSMSSandboxPhoneNumbersResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSubscriptionsResponse(data.ListSubscriptionsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSubscriptionsByTopicCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSubscriptionsByTopicResponse(data.ListSubscriptionsByTopicResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListTagsForResourceResponse(data.ListTagsForResourceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTopicsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListTopicsResponse(data.ListTopicsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_OptInPhoneNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_OptInPhoneNumberResponse(data.OptInPhoneNumberResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PublishCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PublishResponse(data.PublishResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PublishBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PublishBatchResponse(data.PublishBatchResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutDataProtectionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RemovePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SetEndpointAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SetPlatformApplicationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SetSMSAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SetSMSAttributesResponse(data.SetSMSAttributesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetSubscriptionAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SetTopicAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SubscribeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SubscribeResponse(data.SubscribeResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_TagResourceResponse(data.TagResourceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnsubscribeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UntagResourceResponse(data.UntagResourceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_VerifySMSSandboxPhoneNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_VerifySMSSandboxPhoneNumberResult(data.VerifySMSSandboxPhoneNumberResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseXmlErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationError":
        case "com.amazonaws.sns#AuthorizationErrorException":
            throw await de_AuthorizationErrorExceptionRes(parsedOutput);
        case "InternalError":
        case "com.amazonaws.sns#InternalErrorException":
            throw await de_InternalErrorExceptionRes(parsedOutput);
        case "InvalidParameter":
        case "com.amazonaws.sns#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "NotFound":
        case "com.amazonaws.sns#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput);
        case "Throttled":
        case "com.amazonaws.sns#ThrottledException":
            throw await de_ThrottledExceptionRes(parsedOutput);
        case "FilterPolicyLimitExceeded":
        case "com.amazonaws.sns#FilterPolicyLimitExceededException":
            throw await de_FilterPolicyLimitExceededExceptionRes(parsedOutput);
        case "ReplayLimitExceeded":
        case "com.amazonaws.sns#ReplayLimitExceededException":
            throw await de_ReplayLimitExceededExceptionRes(parsedOutput);
        case "SubscriptionLimitExceeded":
        case "com.amazonaws.sns#SubscriptionLimitExceededException":
            throw await de_SubscriptionLimitExceededExceptionRes(parsedOutput);
        case "OptedOut":
        case "com.amazonaws.sns#OptedOutException":
            throw await de_OptedOutExceptionRes(parsedOutput);
        case "UserError":
        case "com.amazonaws.sns#UserErrorException":
            throw await de_UserErrorExceptionRes(parsedOutput);
        case "ConcurrentAccess":
        case "com.amazonaws.sns#ConcurrentAccessException":
            throw await de_ConcurrentAccessExceptionRes(parsedOutput);
        case "InvalidSecurity":
        case "com.amazonaws.sns#InvalidSecurityException":
            throw await de_InvalidSecurityExceptionRes(parsedOutput);
        case "StaleTag":
        case "com.amazonaws.sns#StaleTagException":
            throw await de_StaleTagExceptionRes(parsedOutput);
        case "TagLimitExceeded":
        case "com.amazonaws.sns#TagLimitExceededException":
            throw await de_TagLimitExceededExceptionRes(parsedOutput);
        case "TagPolicy":
        case "com.amazonaws.sns#TagPolicyException":
            throw await de_TagPolicyExceptionRes(parsedOutput);
        case "TopicLimitExceeded":
        case "com.amazonaws.sns#TopicLimitExceededException":
            throw await de_TopicLimitExceededExceptionRes(parsedOutput);
        case "ResourceNotFound":
        case "com.amazonaws.sns#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "InvalidState":
        case "com.amazonaws.sns#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.sns#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "EndpointDisabled":
        case "com.amazonaws.sns#EndpointDisabledException":
            throw await de_EndpointDisabledExceptionRes(parsedOutput);
        case "KMSAccessDenied":
        case "com.amazonaws.sns#KMSAccessDeniedException":
            throw await de_KMSAccessDeniedExceptionRes(parsedOutput);
        case "KMSDisabled":
        case "com.amazonaws.sns#KMSDisabledException":
            throw await de_KMSDisabledExceptionRes(parsedOutput);
        case "KMSInvalidState":
        case "com.amazonaws.sns#KMSInvalidStateException":
            throw await de_KMSInvalidStateExceptionRes(parsedOutput);
        case "KMSNotFound":
        case "com.amazonaws.sns#KMSNotFoundException":
            throw await de_KMSNotFoundExceptionRes(parsedOutput);
        case "KMSOptInRequired":
        case "com.amazonaws.sns#KMSOptInRequired":
            throw await de_KMSOptInRequiredRes(parsedOutput);
        case "KMSThrottling":
        case "com.amazonaws.sns#KMSThrottlingException":
            throw await de_KMSThrottlingExceptionRes(parsedOutput);
        case "ParameterValueInvalid":
        case "com.amazonaws.sns#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput);
        case "PlatformApplicationDisabled":
        case "com.amazonaws.sns#PlatformApplicationDisabledException":
            throw await de_PlatformApplicationDisabledExceptionRes(parsedOutput);
        case "BatchEntryIdsNotDistinct":
        case "com.amazonaws.sns#BatchEntryIdsNotDistinctException":
            throw await de_BatchEntryIdsNotDistinctExceptionRes(parsedOutput);
        case "BatchRequestTooLong":
        case "com.amazonaws.sns#BatchRequestTooLongException":
            throw await de_BatchRequestTooLongExceptionRes(parsedOutput);
        case "EmptyBatchRequest":
        case "com.amazonaws.sns#EmptyBatchRequestException":
            throw await de_EmptyBatchRequestExceptionRes(parsedOutput);
        case "InvalidBatchEntryId":
        case "com.amazonaws.sns#InvalidBatchEntryIdException":
            throw await de_InvalidBatchEntryIdExceptionRes(parsedOutput);
        case "TooManyEntriesInBatchRequest":
        case "com.amazonaws.sns#TooManyEntriesInBatchRequestException":
            throw await de_TooManyEntriesInBatchRequestExceptionRes(parsedOutput);
        case "VerificationException":
        case "com.amazonaws.sns#VerificationException":
            throw await de_VerificationExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AuthorizationErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AuthorizationErrorException(body.Error);
    const exception = new AuthorizationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_BatchEntryIdsNotDistinctExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_BatchEntryIdsNotDistinctException(body.Error);
    const exception = new BatchEntryIdsNotDistinctException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_BatchRequestTooLongExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_BatchRequestTooLongException(body.Error);
    const exception = new BatchRequestTooLongException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConcurrentAccessExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConcurrentAccessException(body.Error);
    const exception = new ConcurrentAccessException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_EmptyBatchRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EmptyBatchRequestException(body.Error);
    const exception = new EmptyBatchRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_EndpointDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EndpointDisabledException(body.Error);
    const exception = new EndpointDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_FilterPolicyLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_FilterPolicyLimitExceededException(body.Error);
    const exception = new FilterPolicyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InternalErrorException(body.Error);
    const exception = new InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidBatchEntryIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidBatchEntryIdException(body.Error);
    const exception = new InvalidBatchEntryIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterException(body.Error);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterValueException(body.Error);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidSecurityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidSecurityException(body.Error);
    const exception = new InvalidSecurityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidStateException(body.Error);
    const exception = new InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSAccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KMSAccessDeniedException(body.Error);
    const exception = new KMSAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KMSDisabledException(body.Error);
    const exception = new KMSDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSInvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KMSInvalidStateException(body.Error);
    const exception = new KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KMSNotFoundException(body.Error);
    const exception = new KMSNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSOptInRequiredRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KMSOptInRequired(body.Error);
    const exception = new KMSOptInRequired({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_KMSThrottlingException(body.Error);
    const exception = new KMSThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NotFoundException(body.Error);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OptedOutExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OptedOutException(body.Error);
    const exception = new OptedOutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PlatformApplicationDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PlatformApplicationDisabledException(body.Error);
    const exception = new PlatformApplicationDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ReplayLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ReplayLimitExceededException(body.Error);
    const exception = new ReplayLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body.Error);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StaleTagExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_StaleTagException(body.Error);
    const exception = new StaleTagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_SubscriptionLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SubscriptionLimitExceededException(body.Error);
    const exception = new SubscriptionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TagLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TagLimitExceededException(body.Error);
    const exception = new TagLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TagPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TagPolicyException(body.Error);
    const exception = new TagPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ThrottledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ThrottledException(body.Error);
    const exception = new ThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyEntriesInBatchRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyEntriesInBatchRequestException(body.Error);
    const exception = new TooManyEntriesInBatchRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TopicLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TopicLimitExceededException(body.Error);
    const exception = new TopicLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UserErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UserErrorException(body.Error);
    const exception = new UserErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ValidationException(body.Error);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_VerificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_VerificationException(body.Error);
    const exception = new VerificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_ActionsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AddPermissionInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_L] != null) {
        entries[_L] = input[_L];
    }
    if (input[_AWSAI] != null) {
        const memberEntries = se_DelegatesList(input[_AWSAI]);
        if (input[_AWSAI]?.length === 0) {
            entries.AWSAccountId = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AWSAccountId.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AN] != null) {
        const memberEntries = se_ActionsList(input[_AN]);
        if (input[_AN]?.length === 0) {
            entries.ActionName = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ActionName.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CheckIfPhoneNumberIsOptedOutInput = (input, context) => {
    const entries = {};
    if (input[_pN] != null) {
        entries[_pN] = input[_pN];
    }
    return entries;
};
const se_ConfirmSubscriptionInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_AOU] != null) {
        entries[_AOU] = input[_AOU];
    }
    return entries;
};
const se_CreatePlatformApplicationInput = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_Pl] != null) {
        entries[_Pl] = input[_Pl];
    }
    if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attributes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreatePlatformEndpointInput = (input, context) => {
    const entries = {};
    if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_CUD] != null) {
        entries[_CUD] = input[_CUD];
    }
    if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attributes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateSMSSandboxPhoneNumberInput = (input, context) => {
    const entries = {};
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_LC] != null) {
        entries[_LC] = input[_LC];
    }
    return entries;
};
const se_CreateTopicInput = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_At] != null) {
        const memberEntries = se_TopicAttributesMap(input[_At]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attributes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DPP] != null) {
        entries[_DPP] = input[_DPP];
    }
    return entries;
};
const se_DelegatesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteEndpointInput = (input, context) => {
    const entries = {};
    if (input[_EA] != null) {
        entries[_EA] = input[_EA];
    }
    return entries;
};
const se_DeletePlatformApplicationInput = (input, context) => {
    const entries = {};
    if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
    }
    return entries;
};
const se_DeleteSMSSandboxPhoneNumberInput = (input, context) => {
    const entries = {};
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    return entries;
};
const se_DeleteTopicInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    return entries;
};
const se_GetDataProtectionPolicyInput = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    return entries;
};
const se_GetEndpointAttributesInput = (input, context) => {
    const entries = {};
    if (input[_EA] != null) {
        entries[_EA] = input[_EA];
    }
    return entries;
};
const se_GetPlatformApplicationAttributesInput = (input, context) => {
    const entries = {};
    if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
    }
    return entries;
};
const se_GetSMSAttributesInput = (input, context) => {
    const entries = {};
    if (input[_a] != null) {
        const memberEntries = se_ListString(input[_a]);
        if (input[_a]?.length === 0) {
            entries.attributes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `attributes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetSMSSandboxAccountStatusInput = (input, context) => {
    const entries = {};
    return entries;
};
const se_GetSubscriptionAttributesInput = (input, context) => {
    const entries = {};
    if (input[_SA] != null) {
        entries[_SA] = input[_SA];
    }
    return entries;
};
const se_GetTopicAttributesInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    return entries;
};
const se_ListEndpointsByPlatformApplicationInput = (input, context) => {
    const entries = {};
    if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListOriginationNumbersRequest = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_ListPhoneNumbersOptedOutInput = (input, context) => {
    const entries = {};
    if (input[_nT] != null) {
        entries[_nT] = input[_nT];
    }
    return entries;
};
const se_ListPlatformApplicationsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListSMSSandboxPhoneNumbersInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_ListString = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ListSubscriptionsByTopicInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListSubscriptionsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListTagsForResourceRequest = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    return entries;
};
const se_ListTopicsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_MapStringToString = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const se_MessageAttributeMap = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.Name`] = key;
        const memberEntries = se_MessageAttributeValue(input[key], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`entry.${counter}.Value.${key}`] = value;
        });
        counter++;
    });
    return entries;
};
const se_MessageAttributeValue = (input, context) => {
    const entries = {};
    if (input[_DTa] != null) {
        entries[_DTa] = input[_DTa];
    }
    if (input[_SV] != null) {
        entries[_SV] = input[_SV];
    }
    if (input[_BV] != null) {
        entries[_BV] = context.base64Encoder(input[_BV]);
    }
    return entries;
};
const se_OptInPhoneNumberInput = (input, context) => {
    const entries = {};
    if (input[_pN] != null) {
        entries[_pN] = input[_pN];
    }
    return entries;
};
const se_PublishBatchInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_PBRE] != null) {
        const memberEntries = se_PublishBatchRequestEntryList(input[_PBRE], context);
        if (input[_PBRE]?.length === 0) {
            entries.PublishBatchRequestEntries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PublishBatchRequestEntries.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PublishBatchRequestEntry = (input, context) => {
    const entries = {};
    if (input[_I] != null) {
        entries[_I] = input[_I];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Su] != null) {
        entries[_Su] = input[_Su];
    }
    if (input[_MS] != null) {
        entries[_MS] = input[_MS];
    }
    if (input[_MA] != null) {
        const memberEntries = se_MessageAttributeMap(input[_MA], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MessageAttributes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MDI] != null) {
        entries[_MDI] = input[_MDI];
    }
    if (input[_MGI] != null) {
        entries[_MGI] = input[_MGI];
    }
    return entries;
};
const se_PublishBatchRequestEntryList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PublishBatchRequestEntry(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PublishInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_TAa] != null) {
        entries[_TAa] = input[_TAa];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Su] != null) {
        entries[_Su] = input[_Su];
    }
    if (input[_MS] != null) {
        entries[_MS] = input[_MS];
    }
    if (input[_MA] != null) {
        const memberEntries = se_MessageAttributeMap(input[_MA], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MessageAttributes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MDI] != null) {
        entries[_MDI] = input[_MDI];
    }
    if (input[_MGI] != null) {
        entries[_MGI] = input[_MGI];
    }
    return entries;
};
const se_PutDataProtectionPolicyInput = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    if (input[_DPP] != null) {
        entries[_DPP] = input[_DPP];
    }
    return entries;
};
const se_RemovePermissionInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_L] != null) {
        entries[_L] = input[_L];
    }
    return entries;
};
const se_SetEndpointAttributesInput = (input, context) => {
    const entries = {};
    if (input[_EA] != null) {
        entries[_EA] = input[_EA];
    }
    if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attributes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SetPlatformApplicationAttributesInput = (input, context) => {
    const entries = {};
    if (input[_PAA] != null) {
        entries[_PAA] = input[_PAA];
    }
    if (input[_At] != null) {
        const memberEntries = se_MapStringToString(input[_At]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attributes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SetSMSAttributesInput = (input, context) => {
    const entries = {};
    if (input[_a] != null) {
        const memberEntries = se_MapStringToString(input[_a]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `attributes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SetSubscriptionAttributesInput = (input, context) => {
    const entries = {};
    if (input[_SA] != null) {
        entries[_SA] = input[_SA];
    }
    if (input[_ANt] != null) {
        entries[_ANt] = input[_ANt];
    }
    if (input[_AV] != null) {
        entries[_AV] = input[_AV];
    }
    return entries;
};
const se_SetTopicAttributesInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_ANt] != null) {
        entries[_ANt] = input[_ANt];
    }
    if (input[_AV] != null) {
        entries[_AV] = input[_AV];
    }
    return entries;
};
const se_SubscribeInput = (input, context) => {
    const entries = {};
    if (input[_TA] != null) {
        entries[_TA] = input[_TA];
    }
    if (input[_Pr] != null) {
        entries[_Pr] = input[_Pr];
    }
    if (input[_E] != null) {
        entries[_E] = input[_E];
    }
    if (input[_At] != null) {
        const memberEntries = se_SubscriptionAttributesMap(input[_At]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attributes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RSA] != null) {
        entries[_RSA] = input[_RSA];
    }
    return entries;
};
const se_SubscriptionAttributesMap = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input[_K] != null) {
        entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_TagKeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TagResourceRequest = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TopicAttributesMap = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const se_UnsubscribeInput = (input, context) => {
    const entries = {};
    if (input[_SA] != null) {
        entries[_SA] = input[_SA];
    }
    return entries;
};
const se_UntagResourceRequest = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    if (input[_TK] != null) {
        const memberEntries = se_TagKeyList(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_VerifySMSSandboxPhoneNumberInput = (input, context) => {
    const entries = {};
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_OTP] != null) {
        entries[_OTP] = input[_OTP];
    }
    return entries;
};
const de_AuthorizationErrorException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_BatchEntryIdsNotDistinctException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_BatchRequestTooLongException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_BatchResultErrorEntry = (output, context) => {
    const contents = {};
    if (output[_I] != null) {
        contents[_I] = smithyClient.expectString(output[_I]);
    }
    if (output[_C] != null) {
        contents[_C] = smithyClient.expectString(output[_C]);
    }
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    if (output[_SF] != null) {
        contents[_SF] = smithyClient.parseBoolean(output[_SF]);
    }
    return contents;
};
const de_BatchResultErrorEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchResultErrorEntry(entry);
    });
};
const de_CheckIfPhoneNumberIsOptedOutResponse = (output, context) => {
    const contents = {};
    if (output[_iOO] != null) {
        contents[_iOO] = smithyClient.parseBoolean(output[_iOO]);
    }
    return contents;
};
const de_ConcurrentAccessException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ConfirmSubscriptionResponse = (output, context) => {
    const contents = {};
    if (output[_SA] != null) {
        contents[_SA] = smithyClient.expectString(output[_SA]);
    }
    return contents;
};
const de_CreateEndpointResponse = (output, context) => {
    const contents = {};
    if (output[_EA] != null) {
        contents[_EA] = smithyClient.expectString(output[_EA]);
    }
    return contents;
};
const de_CreatePlatformApplicationResponse = (output, context) => {
    const contents = {};
    if (output[_PAA] != null) {
        contents[_PAA] = smithyClient.expectString(output[_PAA]);
    }
    return contents;
};
const de_CreateSMSSandboxPhoneNumberResult = (output, context) => {
    const contents = {};
    return contents;
};
const de_CreateTopicResponse = (output, context) => {
    const contents = {};
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    return contents;
};
const de_DeleteSMSSandboxPhoneNumberResult = (output, context) => {
    const contents = {};
    return contents;
};
const de_EmptyBatchRequestException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_Endpoint = (output, context) => {
    const contents = {};
    if (output[_EA] != null) {
        contents[_EA] = smithyClient.expectString(output[_EA]);
    }
    if (String(output.Attributes).trim() === "") {
        contents[_At] = {};
    }
    else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString(smithyClient.getArrayIfSingleItem(output[_At][_e]));
    }
    return contents;
};
const de_EndpointDisabledException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_FilterPolicyLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_GetDataProtectionPolicyResponse = (output, context) => {
    const contents = {};
    if (output[_DPP] != null) {
        contents[_DPP] = smithyClient.expectString(output[_DPP]);
    }
    return contents;
};
const de_GetEndpointAttributesResponse = (output, context) => {
    const contents = {};
    if (String(output.Attributes).trim() === "") {
        contents[_At] = {};
    }
    else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString(smithyClient.getArrayIfSingleItem(output[_At][_e]));
    }
    return contents;
};
const de_GetPlatformApplicationAttributesResponse = (output, context) => {
    const contents = {};
    if (String(output.Attributes).trim() === "") {
        contents[_At] = {};
    }
    else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString(smithyClient.getArrayIfSingleItem(output[_At][_e]));
    }
    return contents;
};
const de_GetSMSAttributesResponse = (output, context) => {
    const contents = {};
    if (String(output.attributes).trim() === "") {
        contents[_a] = {};
    }
    else if (output[_a] != null && output[_a][_e] != null) {
        contents[_a] = de_MapStringToString(smithyClient.getArrayIfSingleItem(output[_a][_e]));
    }
    return contents;
};
const de_GetSMSSandboxAccountStatusResult = (output, context) => {
    const contents = {};
    if (output[_IIS] != null) {
        contents[_IIS] = smithyClient.parseBoolean(output[_IIS]);
    }
    return contents;
};
const de_GetSubscriptionAttributesResponse = (output, context) => {
    const contents = {};
    if (String(output.Attributes).trim() === "") {
        contents[_At] = {};
    }
    else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_SubscriptionAttributesMap(smithyClient.getArrayIfSingleItem(output[_At][_e]));
    }
    return contents;
};
const de_GetTopicAttributesResponse = (output, context) => {
    const contents = {};
    if (String(output.Attributes).trim() === "") {
        contents[_At] = {};
    }
    else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_TopicAttributesMap(smithyClient.getArrayIfSingleItem(output[_At][_e]));
    }
    return contents;
};
const de_InternalErrorException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidBatchEntryIdException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidParameterException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidParameterValueException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidSecurityException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_InvalidStateException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_KMSAccessDeniedException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_KMSDisabledException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_KMSInvalidStateException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_KMSNotFoundException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_KMSOptInRequired = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_KMSThrottlingException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ListEndpointsByPlatformApplicationResponse = (output, context) => {
    const contents = {};
    if (String(output.Endpoints).trim() === "") {
        contents[_En] = [];
    }
    else if (output[_En] != null && output[_En][_me] != null) {
        contents[_En] = de_ListOfEndpoints(smithyClient.getArrayIfSingleItem(output[_En][_me]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListOfEndpoints = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Endpoint(entry);
    });
};
const de_ListOfPlatformApplications = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformApplication(entry);
    });
};
const de_ListOriginationNumbersResult = (output, context) => {
    const contents = {};
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    if (String(output.PhoneNumbers).trim() === "") {
        contents[_PNh] = [];
    }
    else if (output[_PNh] != null && output[_PNh][_me] != null) {
        contents[_PNh] = de_PhoneNumberInformationList(smithyClient.getArrayIfSingleItem(output[_PNh][_me]));
    }
    return contents;
};
const de_ListPhoneNumbersOptedOutResponse = (output, context) => {
    const contents = {};
    if (String(output.phoneNumbers).trim() === "") {
        contents[_pNh] = [];
    }
    else if (output[_pNh] != null && output[_pNh][_me] != null) {
        contents[_pNh] = de_PhoneNumberList(smithyClient.getArrayIfSingleItem(output[_pNh][_me]));
    }
    if (output[_nT] != null) {
        contents[_nT] = smithyClient.expectString(output[_nT]);
    }
    return contents;
};
const de_ListPlatformApplicationsResponse = (output, context) => {
    const contents = {};
    if (String(output.PlatformApplications).trim() === "") {
        contents[_PA] = [];
    }
    else if (output[_PA] != null && output[_PA][_me] != null) {
        contents[_PA] = de_ListOfPlatformApplications(smithyClient.getArrayIfSingleItem(output[_PA][_me]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListSMSSandboxPhoneNumbersResult = (output, context) => {
    const contents = {};
    if (String(output.PhoneNumbers).trim() === "") {
        contents[_PNh] = [];
    }
    else if (output[_PNh] != null && output[_PNh][_me] != null) {
        contents[_PNh] = de_SMSSandboxPhoneNumberList(smithyClient.getArrayIfSingleItem(output[_PNh][_me]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListSubscriptionsByTopicResponse = (output, context) => {
    const contents = {};
    if (String(output.Subscriptions).trim() === "") {
        contents[_Sub] = [];
    }
    else if (output[_Sub] != null && output[_Sub][_me] != null) {
        contents[_Sub] = de_SubscriptionsList(smithyClient.getArrayIfSingleItem(output[_Sub][_me]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListSubscriptionsResponse = (output, context) => {
    const contents = {};
    if (String(output.Subscriptions).trim() === "") {
        contents[_Sub] = [];
    }
    else if (output[_Sub] != null && output[_Sub][_me] != null) {
        contents[_Sub] = de_SubscriptionsList(smithyClient.getArrayIfSingleItem(output[_Sub][_me]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListTagsForResourceResponse = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_Ta] != null && output[_Ta][_me] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_Ta][_me]));
    }
    return contents;
};
const de_ListTopicsResponse = (output, context) => {
    const contents = {};
    if (String(output.Topics).trim() === "") {
        contents[_To] = [];
    }
    else if (output[_To] != null && output[_To][_me] != null) {
        contents[_To] = de_TopicsList(smithyClient.getArrayIfSingleItem(output[_To][_me]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_MapStringToString = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_NotFoundException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_NumberCapabilityList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_OptedOutException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_OptInPhoneNumberResponse = (output, context) => {
    const contents = {};
    return contents;
};
const de_PhoneNumberInformation = (output, context) => {
    const contents = {};
    if (output[_CA] != null) {
        contents[_CA] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CA]));
    }
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_ICC] != null) {
        contents[_ICC] = smithyClient.expectString(output[_ICC]);
    }
    if (output[_RT] != null) {
        contents[_RT] = smithyClient.expectString(output[_RT]);
    }
    if (String(output.NumberCapabilities).trim() === "") {
        contents[_NC] = [];
    }
    else if (output[_NC] != null && output[_NC][_me] != null) {
        contents[_NC] = de_NumberCapabilityList(smithyClient.getArrayIfSingleItem(output[_NC][_me]));
    }
    return contents;
};
const de_PhoneNumberInformationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PhoneNumberInformation(entry);
    });
};
const de_PhoneNumberList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_PlatformApplication = (output, context) => {
    const contents = {};
    if (output[_PAA] != null) {
        contents[_PAA] = smithyClient.expectString(output[_PAA]);
    }
    if (String(output.Attributes).trim() === "") {
        contents[_At] = {};
    }
    else if (output[_At] != null && output[_At][_e] != null) {
        contents[_At] = de_MapStringToString(smithyClient.getArrayIfSingleItem(output[_At][_e]));
    }
    return contents;
};
const de_PlatformApplicationDisabledException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_PublishBatchResponse = (output, context) => {
    const contents = {};
    if (String(output.Successful).trim() === "") {
        contents[_Suc] = [];
    }
    else if (output[_Suc] != null && output[_Suc][_me] != null) {
        contents[_Suc] = de_PublishBatchResultEntryList(smithyClient.getArrayIfSingleItem(output[_Suc][_me]));
    }
    if (String(output.Failed).trim() === "") {
        contents[_F] = [];
    }
    else if (output[_F] != null && output[_F][_me] != null) {
        contents[_F] = de_BatchResultErrorEntryList(smithyClient.getArrayIfSingleItem(output[_F][_me]));
    }
    return contents;
};
const de_PublishBatchResultEntry = (output, context) => {
    const contents = {};
    if (output[_I] != null) {
        contents[_I] = smithyClient.expectString(output[_I]);
    }
    if (output[_MI] != null) {
        contents[_MI] = smithyClient.expectString(output[_MI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    return contents;
};
const de_PublishBatchResultEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PublishBatchResultEntry(entry);
    });
};
const de_PublishResponse = (output, context) => {
    const contents = {};
    if (output[_MI] != null) {
        contents[_MI] = smithyClient.expectString(output[_MI]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    return contents;
};
const de_ReplayLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ResourceNotFoundException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_SetSMSAttributesResponse = (output, context) => {
    const contents = {};
    return contents;
};
const de_SMSSandboxPhoneNumber = (output, context) => {
    const contents = {};
    if (output[_PN] != null) {
        contents[_PN] = smithyClient.expectString(output[_PN]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    return contents;
};
const de_SMSSandboxPhoneNumberList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SMSSandboxPhoneNumber(entry);
    });
};
const de_StaleTagException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_SubscribeResponse = (output, context) => {
    const contents = {};
    if (output[_SA] != null) {
        contents[_SA] = smithyClient.expectString(output[_SA]);
    }
    return contents;
};
const de_Subscription = (output, context) => {
    const contents = {};
    if (output[_SA] != null) {
        contents[_SA] = smithyClient.expectString(output[_SA]);
    }
    if (output[_O] != null) {
        contents[_O] = smithyClient.expectString(output[_O]);
    }
    if (output[_Pr] != null) {
        contents[_Pr] = smithyClient.expectString(output[_Pr]);
    }
    if (output[_E] != null) {
        contents[_E] = smithyClient.expectString(output[_E]);
    }
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    return contents;
};
const de_SubscriptionAttributesMap = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_SubscriptionLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_SubscriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Subscription(entry);
    });
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output[_K] != null) {
        contents[_K] = smithyClient.expectString(output[_K]);
    }
    if (output[_Va] != null) {
        contents[_Va] = smithyClient.expectString(output[_Va]);
    }
    return contents;
};
const de_TagLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
};
const de_TagPolicyException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_TagResourceResponse = (output, context) => {
    const contents = {};
    return contents;
};
const de_ThrottledException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_TooManyEntriesInBatchRequestException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_Topic = (output, context) => {
    const contents = {};
    if (output[_TA] != null) {
        contents[_TA] = smithyClient.expectString(output[_TA]);
    }
    return contents;
};
const de_TopicAttributesMap = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_TopicLimitExceededException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_TopicsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Topic(entry);
    });
};
const de_UntagResourceResponse = (output, context) => {
    const contents = {};
    return contents;
};
const de_UserErrorException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_m] = smithyClient.expectString(output[_m]);
    }
    return contents;
};
const de_ValidationException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    return contents;
};
const de_VerificationException = (output, context) => {
    const contents = {};
    if (output[_M] != null) {
        contents[_M] = smithyClient.expectString(output[_M]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    return contents;
};
const de_VerifySMSSandboxPhoneNumberResult = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(SNSServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const _ = "2010-03-31";
const _A = "Action";
const _AN = "ActionName";
const _ANt = "AttributeName";
const _AOU = "AuthenticateOnUnsubscribe";
const _AP = "AddPermission";
const _AV = "AttributeValue";
const _AWSAI = "AWSAccountId";
const _At = "Attributes";
const _BV = "BinaryValue";
const _C = "Code";
const _CA = "CreatedAt";
const _CIPNIOO = "CheckIfPhoneNumberIsOptedOut";
const _CPA = "CreatePlatformApplication";
const _CPE = "CreatePlatformEndpoint";
const _CS = "ConfirmSubscription";
const _CSMSSPN = "CreateSMSSandboxPhoneNumber";
const _CT = "CreateTopic";
const _CUD = "CustomUserData";
const _DE = "DeleteEndpoint";
const _DPA = "DeletePlatformApplication";
const _DPP = "DataProtectionPolicy";
const _DSMSSPN = "DeleteSMSSandboxPhoneNumber";
const _DT = "DeleteTopic";
const _DTa = "DataType";
const _E = "Endpoint";
const _EA = "EndpointArn";
const _En = "Endpoints";
const _F = "Failed";
const _GDPP = "GetDataProtectionPolicy";
const _GEA = "GetEndpointAttributes";
const _GPAA = "GetPlatformApplicationAttributes";
const _GSA = "GetSubscriptionAttributes";
const _GSMSA = "GetSMSAttributes";
const _GSMSSAS = "GetSMSSandboxAccountStatus";
const _GTA = "GetTopicAttributes";
const _I = "Id";
const _ICC = "Iso2CountryCode";
const _IIS = "IsInSandbox";
const _K = "Key";
const _L = "Label";
const _LC = "LanguageCode";
const _LEBPA = "ListEndpointsByPlatformApplication";
const _LON = "ListOriginationNumbers";
const _LPA = "ListPlatformApplications";
const _LPNOO = "ListPhoneNumbersOptedOut";
const _LS = "ListSubscriptions";
const _LSBT = "ListSubscriptionsByTopic";
const _LSMSSPN = "ListSMSSandboxPhoneNumbers";
const _LT = "ListTopics";
const _LTFR = "ListTagsForResource";
const _M = "Message";
const _MA = "MessageAttributes";
const _MDI = "MessageDeduplicationId";
const _MGI = "MessageGroupId";
const _MI = "MessageId";
const _MR = "MaxResults";
const _MS = "MessageStructure";
const _N = "Name";
const _NC = "NumberCapabilities";
const _NT = "NextToken";
const _O = "Owner";
const _OIPN = "OptInPhoneNumber";
const _OTP = "OneTimePassword";
const _P = "Publish";
const _PA = "PlatformApplications";
const _PAA = "PlatformApplicationArn";
const _PB = "PublishBatch";
const _PBRE = "PublishBatchRequestEntries";
const _PDPP = "PutDataProtectionPolicy";
const _PN = "PhoneNumber";
const _PNh = "PhoneNumbers";
const _Pl = "Platform";
const _Pr = "Protocol";
const _RA = "ResourceArn";
const _RP = "RemovePermission";
const _RSA = "ReturnSubscriptionArn";
const _RT = "RouteType";
const _S = "Subscribe";
const _SA = "SubscriptionArn";
const _SEA = "SetEndpointAttributes";
const _SF = "SenderFault";
const _SN = "SequenceNumber";
const _SPAA = "SetPlatformApplicationAttributes";
const _SSA = "SetSubscriptionAttributes";
const _SSMSA = "SetSMSAttributes";
const _STA = "SetTopicAttributes";
const _SV = "StringValue";
const _St = "Status";
const _Su = "Subject";
const _Sub = "Subscriptions";
const _Suc = "Successful";
const _T = "Token";
const _TA = "TopicArn";
const _TAa = "TargetArn";
const _TK = "TagKeys";
const _TR = "TagResource";
const _Ta = "Tags";
const _To = "Topics";
const _U = "Unsubscribe";
const _UR = "UntagResource";
const _V = "Version";
const _VSMSSPN = "VerifySMSSandboxPhoneNumber";
const _Va = "Value";
const _a = "attributes";
const _e = "entry";
const _iOO = "isOptedOut";
const _m = "message";
const _me = "member";
const _nT = "nextToken";
const _pN = "phoneNumber";
const _pNh = "phoneNumbers";
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => smithyClient.extendedEncodeURIComponent(key) + "=" + smithyClient.extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};

class AddPermissionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "AddPermission", {})
    .n("SNSClient", "AddPermissionCommand")
    .f(void 0, void 0)
    .ser(se_AddPermissionCommand)
    .de(de_AddPermissionCommand)
    .build() {
}

class CheckIfPhoneNumberIsOptedOutCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "CheckIfPhoneNumberIsOptedOut", {})
    .n("SNSClient", "CheckIfPhoneNumberIsOptedOutCommand")
    .f(CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog, void 0)
    .ser(se_CheckIfPhoneNumberIsOptedOutCommand)
    .de(de_CheckIfPhoneNumberIsOptedOutCommand)
    .build() {
}

class ConfirmSubscriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ConfirmSubscription", {})
    .n("SNSClient", "ConfirmSubscriptionCommand")
    .f(void 0, void 0)
    .ser(se_ConfirmSubscriptionCommand)
    .de(de_ConfirmSubscriptionCommand)
    .build() {
}

class CreatePlatformApplicationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "CreatePlatformApplication", {})
    .n("SNSClient", "CreatePlatformApplicationCommand")
    .f(void 0, void 0)
    .ser(se_CreatePlatformApplicationCommand)
    .de(de_CreatePlatformApplicationCommand)
    .build() {
}

class CreatePlatformEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "CreatePlatformEndpoint", {})
    .n("SNSClient", "CreatePlatformEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreatePlatformEndpointCommand)
    .de(de_CreatePlatformEndpointCommand)
    .build() {
}

class CreateSMSSandboxPhoneNumberCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "CreateSMSSandboxPhoneNumber", {})
    .n("SNSClient", "CreateSMSSandboxPhoneNumberCommand")
    .f(CreateSMSSandboxPhoneNumberInputFilterSensitiveLog, void 0)
    .ser(se_CreateSMSSandboxPhoneNumberCommand)
    .de(de_CreateSMSSandboxPhoneNumberCommand)
    .build() {
}

class CreateTopicCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "CreateTopic", {})
    .n("SNSClient", "CreateTopicCommand")
    .f(void 0, void 0)
    .ser(se_CreateTopicCommand)
    .de(de_CreateTopicCommand)
    .build() {
}

class DeleteEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "DeleteEndpoint", {})
    .n("SNSClient", "DeleteEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEndpointCommand)
    .de(de_DeleteEndpointCommand)
    .build() {
}

class DeletePlatformApplicationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "DeletePlatformApplication", {})
    .n("SNSClient", "DeletePlatformApplicationCommand")
    .f(void 0, void 0)
    .ser(se_DeletePlatformApplicationCommand)
    .de(de_DeletePlatformApplicationCommand)
    .build() {
}

class DeleteSMSSandboxPhoneNumberCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "DeleteSMSSandboxPhoneNumber", {})
    .n("SNSClient", "DeleteSMSSandboxPhoneNumberCommand")
    .f(DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog, void 0)
    .ser(se_DeleteSMSSandboxPhoneNumberCommand)
    .de(de_DeleteSMSSandboxPhoneNumberCommand)
    .build() {
}

class DeleteTopicCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "DeleteTopic", {})
    .n("SNSClient", "DeleteTopicCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTopicCommand)
    .de(de_DeleteTopicCommand)
    .build() {
}

class GetDataProtectionPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "GetDataProtectionPolicy", {})
    .n("SNSClient", "GetDataProtectionPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetDataProtectionPolicyCommand)
    .de(de_GetDataProtectionPolicyCommand)
    .build() {
}

class GetEndpointAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "GetEndpointAttributes", {})
    .n("SNSClient", "GetEndpointAttributesCommand")
    .f(void 0, void 0)
    .ser(se_GetEndpointAttributesCommand)
    .de(de_GetEndpointAttributesCommand)
    .build() {
}

class GetPlatformApplicationAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "GetPlatformApplicationAttributes", {})
    .n("SNSClient", "GetPlatformApplicationAttributesCommand")
    .f(void 0, void 0)
    .ser(se_GetPlatformApplicationAttributesCommand)
    .de(de_GetPlatformApplicationAttributesCommand)
    .build() {
}

class GetSMSAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "GetSMSAttributes", {})
    .n("SNSClient", "GetSMSAttributesCommand")
    .f(void 0, void 0)
    .ser(se_GetSMSAttributesCommand)
    .de(de_GetSMSAttributesCommand)
    .build() {
}

class GetSMSSandboxAccountStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "GetSMSSandboxAccountStatus", {})
    .n("SNSClient", "GetSMSSandboxAccountStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetSMSSandboxAccountStatusCommand)
    .de(de_GetSMSSandboxAccountStatusCommand)
    .build() {
}

class GetSubscriptionAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "GetSubscriptionAttributes", {})
    .n("SNSClient", "GetSubscriptionAttributesCommand")
    .f(void 0, void 0)
    .ser(se_GetSubscriptionAttributesCommand)
    .de(de_GetSubscriptionAttributesCommand)
    .build() {
}

class GetTopicAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "GetTopicAttributes", {})
    .n("SNSClient", "GetTopicAttributesCommand")
    .f(void 0, void 0)
    .ser(se_GetTopicAttributesCommand)
    .de(de_GetTopicAttributesCommand)
    .build() {
}

class ListEndpointsByPlatformApplicationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListEndpointsByPlatformApplication", {})
    .n("SNSClient", "ListEndpointsByPlatformApplicationCommand")
    .f(void 0, void 0)
    .ser(se_ListEndpointsByPlatformApplicationCommand)
    .de(de_ListEndpointsByPlatformApplicationCommand)
    .build() {
}

class ListOriginationNumbersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListOriginationNumbers", {})
    .n("SNSClient", "ListOriginationNumbersCommand")
    .f(void 0, ListOriginationNumbersResultFilterSensitiveLog)
    .ser(se_ListOriginationNumbersCommand)
    .de(de_ListOriginationNumbersCommand)
    .build() {
}

class ListPhoneNumbersOptedOutCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListPhoneNumbersOptedOut", {})
    .n("SNSClient", "ListPhoneNumbersOptedOutCommand")
    .f(void 0, ListPhoneNumbersOptedOutResponseFilterSensitiveLog)
    .ser(se_ListPhoneNumbersOptedOutCommand)
    .de(de_ListPhoneNumbersOptedOutCommand)
    .build() {
}

class ListPlatformApplicationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListPlatformApplications", {})
    .n("SNSClient", "ListPlatformApplicationsCommand")
    .f(void 0, void 0)
    .ser(se_ListPlatformApplicationsCommand)
    .de(de_ListPlatformApplicationsCommand)
    .build() {
}

class ListSMSSandboxPhoneNumbersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListSMSSandboxPhoneNumbers", {})
    .n("SNSClient", "ListSMSSandboxPhoneNumbersCommand")
    .f(void 0, ListSMSSandboxPhoneNumbersResultFilterSensitiveLog)
    .ser(se_ListSMSSandboxPhoneNumbersCommand)
    .de(de_ListSMSSandboxPhoneNumbersCommand)
    .build() {
}

class ListSubscriptionsByTopicCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListSubscriptionsByTopic", {})
    .n("SNSClient", "ListSubscriptionsByTopicCommand")
    .f(void 0, void 0)
    .ser(se_ListSubscriptionsByTopicCommand)
    .de(de_ListSubscriptionsByTopicCommand)
    .build() {
}

class ListSubscriptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListSubscriptions", {})
    .n("SNSClient", "ListSubscriptionsCommand")
    .f(void 0, void 0)
    .ser(se_ListSubscriptionsCommand)
    .de(de_ListSubscriptionsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListTagsForResource", {})
    .n("SNSClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTopicsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "ListTopics", {})
    .n("SNSClient", "ListTopicsCommand")
    .f(void 0, void 0)
    .ser(se_ListTopicsCommand)
    .de(de_ListTopicsCommand)
    .build() {
}

class OptInPhoneNumberCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "OptInPhoneNumber", {})
    .n("SNSClient", "OptInPhoneNumberCommand")
    .f(OptInPhoneNumberInputFilterSensitiveLog, void 0)
    .ser(se_OptInPhoneNumberCommand)
    .de(de_OptInPhoneNumberCommand)
    .build() {
}

class PublishBatchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "PublishBatch", {})
    .n("SNSClient", "PublishBatchCommand")
    .f(void 0, void 0)
    .ser(se_PublishBatchCommand)
    .de(de_PublishBatchCommand)
    .build() {
}

class PublishCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "Publish", {})
    .n("SNSClient", "PublishCommand")
    .f(PublishInputFilterSensitiveLog, void 0)
    .ser(se_PublishCommand)
    .de(de_PublishCommand)
    .build() {
}

class PutDataProtectionPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "PutDataProtectionPolicy", {})
    .n("SNSClient", "PutDataProtectionPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutDataProtectionPolicyCommand)
    .de(de_PutDataProtectionPolicyCommand)
    .build() {
}

class RemovePermissionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "RemovePermission", {})
    .n("SNSClient", "RemovePermissionCommand")
    .f(void 0, void 0)
    .ser(se_RemovePermissionCommand)
    .de(de_RemovePermissionCommand)
    .build() {
}

class SetEndpointAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "SetEndpointAttributes", {})
    .n("SNSClient", "SetEndpointAttributesCommand")
    .f(void 0, void 0)
    .ser(se_SetEndpointAttributesCommand)
    .de(de_SetEndpointAttributesCommand)
    .build() {
}

class SetPlatformApplicationAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "SetPlatformApplicationAttributes", {})
    .n("SNSClient", "SetPlatformApplicationAttributesCommand")
    .f(void 0, void 0)
    .ser(se_SetPlatformApplicationAttributesCommand)
    .de(de_SetPlatformApplicationAttributesCommand)
    .build() {
}

class SetSMSAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "SetSMSAttributes", {})
    .n("SNSClient", "SetSMSAttributesCommand")
    .f(void 0, void 0)
    .ser(se_SetSMSAttributesCommand)
    .de(de_SetSMSAttributesCommand)
    .build() {
}

class SetSubscriptionAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "SetSubscriptionAttributes", {})
    .n("SNSClient", "SetSubscriptionAttributesCommand")
    .f(void 0, void 0)
    .ser(se_SetSubscriptionAttributesCommand)
    .de(de_SetSubscriptionAttributesCommand)
    .build() {
}

class SetTopicAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "SetTopicAttributes", {})
    .n("SNSClient", "SetTopicAttributesCommand")
    .f(void 0, void 0)
    .ser(se_SetTopicAttributesCommand)
    .de(de_SetTopicAttributesCommand)
    .build() {
}

class SubscribeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "Subscribe", {})
    .n("SNSClient", "SubscribeCommand")
    .f(void 0, void 0)
    .ser(se_SubscribeCommand)
    .de(de_SubscribeCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "TagResource", {})
    .n("SNSClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UnsubscribeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "Unsubscribe", {})
    .n("SNSClient", "UnsubscribeCommand")
    .f(void 0, void 0)
    .ser(se_UnsubscribeCommand)
    .de(de_UnsubscribeCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "UntagResource", {})
    .n("SNSClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class VerifySMSSandboxPhoneNumberCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonSimpleNotificationService", "VerifySMSSandboxPhoneNumber", {})
    .n("SNSClient", "VerifySMSSandboxPhoneNumberCommand")
    .f(VerifySMSSandboxPhoneNumberInputFilterSensitiveLog, void 0)
    .ser(se_VerifySMSSandboxPhoneNumberCommand)
    .de(de_VerifySMSSandboxPhoneNumberCommand)
    .build() {
}

const commands = {
    AddPermissionCommand,
    CheckIfPhoneNumberIsOptedOutCommand,
    ConfirmSubscriptionCommand,
    CreatePlatformApplicationCommand,
    CreatePlatformEndpointCommand,
    CreateSMSSandboxPhoneNumberCommand,
    CreateTopicCommand,
    DeleteEndpointCommand,
    DeletePlatformApplicationCommand,
    DeleteSMSSandboxPhoneNumberCommand,
    DeleteTopicCommand,
    GetDataProtectionPolicyCommand,
    GetEndpointAttributesCommand,
    GetPlatformApplicationAttributesCommand,
    GetSMSAttributesCommand,
    GetSMSSandboxAccountStatusCommand,
    GetSubscriptionAttributesCommand,
    GetTopicAttributesCommand,
    ListEndpointsByPlatformApplicationCommand,
    ListOriginationNumbersCommand,
    ListPhoneNumbersOptedOutCommand,
    ListPlatformApplicationsCommand,
    ListSMSSandboxPhoneNumbersCommand,
    ListSubscriptionsCommand,
    ListSubscriptionsByTopicCommand,
    ListTagsForResourceCommand,
    ListTopicsCommand,
    OptInPhoneNumberCommand,
    PublishCommand,
    PublishBatchCommand,
    PutDataProtectionPolicyCommand,
    RemovePermissionCommand,
    SetEndpointAttributesCommand,
    SetPlatformApplicationAttributesCommand,
    SetSMSAttributesCommand,
    SetSubscriptionAttributesCommand,
    SetTopicAttributesCommand,
    SubscribeCommand,
    TagResourceCommand,
    UnsubscribeCommand,
    UntagResourceCommand,
    VerifySMSSandboxPhoneNumberCommand,
};
class SNS extends SNSClient {
}
smithyClient.createAggregatedClient(commands, SNS);

const paginateListEndpointsByPlatformApplication = core.createPaginator(SNSClient, ListEndpointsByPlatformApplicationCommand, "NextToken", "NextToken", "");

const paginateListOriginationNumbers = core.createPaginator(SNSClient, ListOriginationNumbersCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPhoneNumbersOptedOut = core.createPaginator(SNSClient, ListPhoneNumbersOptedOutCommand, "nextToken", "nextToken", "");

const paginateListPlatformApplications = core.createPaginator(SNSClient, ListPlatformApplicationsCommand, "NextToken", "NextToken", "");

const paginateListSMSSandboxPhoneNumbers = core.createPaginator(SNSClient, ListSMSSandboxPhoneNumbersCommand, "NextToken", "NextToken", "MaxResults");

const paginateListSubscriptionsByTopic = core.createPaginator(SNSClient, ListSubscriptionsByTopicCommand, "NextToken", "NextToken", "");

const paginateListSubscriptions = core.createPaginator(SNSClient, ListSubscriptionsCommand, "NextToken", "NextToken", "");

const paginateListTopics = core.createPaginator(SNSClient, ListTopicsCommand, "NextToken", "NextToken", "");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AddPermissionCommand = AddPermissionCommand;
exports.AuthorizationErrorException = AuthorizationErrorException;
exports.BatchEntryIdsNotDistinctException = BatchEntryIdsNotDistinctException;
exports.BatchRequestTooLongException = BatchRequestTooLongException;
exports.CheckIfPhoneNumberIsOptedOutCommand = CheckIfPhoneNumberIsOptedOutCommand;
exports.CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog = CheckIfPhoneNumberIsOptedOutInputFilterSensitiveLog;
exports.ConcurrentAccessException = ConcurrentAccessException;
exports.ConfirmSubscriptionCommand = ConfirmSubscriptionCommand;
exports.CreatePlatformApplicationCommand = CreatePlatformApplicationCommand;
exports.CreatePlatformEndpointCommand = CreatePlatformEndpointCommand;
exports.CreateSMSSandboxPhoneNumberCommand = CreateSMSSandboxPhoneNumberCommand;
exports.CreateSMSSandboxPhoneNumberInputFilterSensitiveLog = CreateSMSSandboxPhoneNumberInputFilterSensitiveLog;
exports.CreateTopicCommand = CreateTopicCommand;
exports.DeleteEndpointCommand = DeleteEndpointCommand;
exports.DeletePlatformApplicationCommand = DeletePlatformApplicationCommand;
exports.DeleteSMSSandboxPhoneNumberCommand = DeleteSMSSandboxPhoneNumberCommand;
exports.DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog = DeleteSMSSandboxPhoneNumberInputFilterSensitiveLog;
exports.DeleteTopicCommand = DeleteTopicCommand;
exports.EmptyBatchRequestException = EmptyBatchRequestException;
exports.EndpointDisabledException = EndpointDisabledException;
exports.FilterPolicyLimitExceededException = FilterPolicyLimitExceededException;
exports.GetDataProtectionPolicyCommand = GetDataProtectionPolicyCommand;
exports.GetEndpointAttributesCommand = GetEndpointAttributesCommand;
exports.GetPlatformApplicationAttributesCommand = GetPlatformApplicationAttributesCommand;
exports.GetSMSAttributesCommand = GetSMSAttributesCommand;
exports.GetSMSSandboxAccountStatusCommand = GetSMSSandboxAccountStatusCommand;
exports.GetSubscriptionAttributesCommand = GetSubscriptionAttributesCommand;
exports.GetTopicAttributesCommand = GetTopicAttributesCommand;
exports.InternalErrorException = InternalErrorException;
exports.InvalidBatchEntryIdException = InvalidBatchEntryIdException;
exports.InvalidParameterException = InvalidParameterException;
exports.InvalidParameterValueException = InvalidParameterValueException;
exports.InvalidSecurityException = InvalidSecurityException;
exports.InvalidStateException = InvalidStateException;
exports.KMSAccessDeniedException = KMSAccessDeniedException;
exports.KMSDisabledException = KMSDisabledException;
exports.KMSInvalidStateException = KMSInvalidStateException;
exports.KMSNotFoundException = KMSNotFoundException;
exports.KMSOptInRequired = KMSOptInRequired;
exports.KMSThrottlingException = KMSThrottlingException;
exports.LanguageCodeString = LanguageCodeString;
exports.ListEndpointsByPlatformApplicationCommand = ListEndpointsByPlatformApplicationCommand;
exports.ListOriginationNumbersCommand = ListOriginationNumbersCommand;
exports.ListOriginationNumbersResultFilterSensitiveLog = ListOriginationNumbersResultFilterSensitiveLog;
exports.ListPhoneNumbersOptedOutCommand = ListPhoneNumbersOptedOutCommand;
exports.ListPhoneNumbersOptedOutResponseFilterSensitiveLog = ListPhoneNumbersOptedOutResponseFilterSensitiveLog;
exports.ListPlatformApplicationsCommand = ListPlatformApplicationsCommand;
exports.ListSMSSandboxPhoneNumbersCommand = ListSMSSandboxPhoneNumbersCommand;
exports.ListSMSSandboxPhoneNumbersResultFilterSensitiveLog = ListSMSSandboxPhoneNumbersResultFilterSensitiveLog;
exports.ListSubscriptionsByTopicCommand = ListSubscriptionsByTopicCommand;
exports.ListSubscriptionsCommand = ListSubscriptionsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTopicsCommand = ListTopicsCommand;
exports.NotFoundException = NotFoundException;
exports.NumberCapability = NumberCapability;
exports.OptInPhoneNumberCommand = OptInPhoneNumberCommand;
exports.OptInPhoneNumberInputFilterSensitiveLog = OptInPhoneNumberInputFilterSensitiveLog;
exports.OptedOutException = OptedOutException;
exports.PhoneNumberInformationFilterSensitiveLog = PhoneNumberInformationFilterSensitiveLog;
exports.PlatformApplicationDisabledException = PlatformApplicationDisabledException;
exports.PublishBatchCommand = PublishBatchCommand;
exports.PublishCommand = PublishCommand;
exports.PublishInputFilterSensitiveLog = PublishInputFilterSensitiveLog;
exports.PutDataProtectionPolicyCommand = PutDataProtectionPolicyCommand;
exports.RemovePermissionCommand = RemovePermissionCommand;
exports.ReplayLimitExceededException = ReplayLimitExceededException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.RouteType = RouteType;
exports.SMSSandboxPhoneNumberFilterSensitiveLog = SMSSandboxPhoneNumberFilterSensitiveLog;
exports.SMSSandboxPhoneNumberVerificationStatus = SMSSandboxPhoneNumberVerificationStatus;
exports.SNS = SNS;
exports.SNSClient = SNSClient;
exports.SNSServiceException = SNSServiceException;
exports.SetEndpointAttributesCommand = SetEndpointAttributesCommand;
exports.SetPlatformApplicationAttributesCommand = SetPlatformApplicationAttributesCommand;
exports.SetSMSAttributesCommand = SetSMSAttributesCommand;
exports.SetSubscriptionAttributesCommand = SetSubscriptionAttributesCommand;
exports.SetTopicAttributesCommand = SetTopicAttributesCommand;
exports.StaleTagException = StaleTagException;
exports.SubscribeCommand = SubscribeCommand;
exports.SubscriptionLimitExceededException = SubscriptionLimitExceededException;
exports.TagLimitExceededException = TagLimitExceededException;
exports.TagPolicyException = TagPolicyException;
exports.TagResourceCommand = TagResourceCommand;
exports.ThrottledException = ThrottledException;
exports.TooManyEntriesInBatchRequestException = TooManyEntriesInBatchRequestException;
exports.TopicLimitExceededException = TopicLimitExceededException;
exports.UnsubscribeCommand = UnsubscribeCommand;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UserErrorException = UserErrorException;
exports.ValidationException = ValidationException;
exports.VerificationException = VerificationException;
exports.VerifySMSSandboxPhoneNumberCommand = VerifySMSSandboxPhoneNumberCommand;
exports.VerifySMSSandboxPhoneNumberInputFilterSensitiveLog = VerifySMSSandboxPhoneNumberInputFilterSensitiveLog;
exports.paginateListEndpointsByPlatformApplication = paginateListEndpointsByPlatformApplication;
exports.paginateListOriginationNumbers = paginateListOriginationNumbers;
exports.paginateListPhoneNumbersOptedOut = paginateListPhoneNumbersOptedOut;
exports.paginateListPlatformApplications = paginateListPlatformApplications;
exports.paginateListSMSSandboxPhoneNumbers = paginateListSMSSandboxPhoneNumbers;
exports.paginateListSubscriptions = paginateListSubscriptions;
exports.paginateListSubscriptionsByTopic = paginateListSubscriptionsByTopic;
exports.paginateListTopics = paginateListTopics;
