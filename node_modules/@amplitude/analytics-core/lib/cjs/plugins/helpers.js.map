{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/plugins/helpers.ts"],"names":[],"mappings":";;;;AAAa,QAAA,mBAAmB,GAAG,eAAe,CAAC;AACtC,QAAA,iBAAiB,GAAG,OAAO,CAAC;AAEzC,oCAAoC;AACvB,QAAA,QAAQ,GAAG,yBAAyB,CAAC;AACrC,QAAA,SAAS,GAAG,wBAAwB,CAAC;AACrC,QAAA,WAAW,GAAG,4BAA4B,CAAC;AAExD;;;;;GAKG;AACI,IAAM,sBAAsB,GAAG,UAAC,IAAmB,EAAE,0BAAyC;;IAAzC,2CAAA,EAAA,+BAAyC;IACnG,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,EAAE,CAAC;KACX;IAED,IAAI,MAAM,GAAG,IAAI,CAAC;IAElB,+DAA+D;IAC/D,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,gBAAQ,EAAE,yBAAiB,CAAC,CAAC;IAErD,mCAAmC;IACnC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAS,EAAE,yBAAiB,CAAC,CAAC;IAEtD,kBAAkB;IAClB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,mBAAW,EAAE,yBAAiB,CAAC,CAAC;;QAExD,0CAA0C;QAC1C,KAAsB,IAAA,+BAAA,iBAAA,0BAA0B,CAAA,sEAAA,8GAAE;YAA7C,IAAM,OAAO,uCAAA;YAChB,IAAI;gBACF,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,yBAAiB,CAAC,CAAC;aACrD;YAAC,WAAM;gBACN,yBAAyB;aAC1B;SACF;;;;;;;;;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AA1BW,QAAA,sBAAsB,0BA0BjC;AAEF;;;GAGG;AACI,IAAM,YAAY,GAAG,UAAC,kBAA8C;IACzE,IAAI,OAAO,QAAQ,KAAK,WAAW,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;QACtD,OAAO,EAAE,CAAC;KACX;IACD,IAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IACrD,IAAI,YAAY,IAAI,YAAY,CAAC,YAAY,CAAC,2BAAmB,CAAC,EAAE;QAClE,OAAO,yBAAiB,CAAC;KAC1B;IACD,OAAO,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,6DAA6D;AAChJ,CAAC,CAAC;AATW,QAAA,YAAY,gBASvB","sourcesContent":["export const TEXT_MASK_ATTRIBUTE = 'data-amp-mask';\nexport const MASKED_TEXT_VALUE = '*****';\n\n// Regex patterns for sensitive data\nexport const CC_REGEX = /\\b(?:\\d[ -]*?){13,16}\\b/;\nexport const SSN_REGEX = /(\\d{3}-?\\d{2}-?\\d{4})/g;\nexport const EMAIL_REGEX = /[^\\s@]+@[^\\s@.]+\\.[^\\s@]+/g;\n\n/**\n * Replaces sensitive strings (credit cards, SSNs, emails) and custom patterns with masked text\n * @param text - The text to search for sensitive data\n * @param additionalMaskTextPatterns - Optional array of additional regex patterns to mask\n * @returns The text with sensitive data replaced by masked text\n */\nexport const replaceSensitiveString = (text: string | null, additionalMaskTextPatterns: RegExp[] = []): string => {\n  if (typeof text !== 'string') {\n    return '';\n  }\n\n  let result = text;\n\n  // Check for credit card number (with or without spaces/dashes)\n  result = result.replace(CC_REGEX, MASKED_TEXT_VALUE);\n\n  // Check for social security number\n  result = result.replace(SSN_REGEX, MASKED_TEXT_VALUE);\n\n  // Check for email\n  result = result.replace(EMAIL_REGEX, MASKED_TEXT_VALUE);\n\n  // Check for additional mask text patterns\n  for (const pattern of additionalMaskTextPatterns) {\n    try {\n      result = result.replace(pattern, MASKED_TEXT_VALUE);\n    } catch {\n      // ignore invalid pattern\n    }\n  }\n\n  return result;\n};\n\n/**\n * Gets the page title, checking if the title element has data-amp-mask attribute\n * @returns The page title, masked if the title element has data-amp-mask attribute\n */\nexport const getPageTitle = (parseTitleFunction?: (title: string) => string): string => {\n  if (typeof document === 'undefined' || !document.title) {\n    return '';\n  }\n  const titleElement = document.querySelector('title');\n  if (titleElement && titleElement.hasAttribute(TEXT_MASK_ATTRIBUTE)) {\n    return MASKED_TEXT_VALUE;\n  }\n  return parseTitleFunction ? parseTitleFunction(document.title) : document.title; // document.title is always synced to the first title element\n};\n"]}