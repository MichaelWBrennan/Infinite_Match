{"version":3,"file":"url-utils.js","sourceRoot":"","sources":["../../../src/utils/url-utils.ts"],"names":[],"mappings":";;;AAEA;;;;;GAKG;AACI,IAAM,mBAAmB,GAAG,UAAC,GAAW,EAAE,SAA0C;IACzF,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;QACnC,OAAO,IAAI,CAAC;KACb;IACD,OAAO,SAAS,CAAC,IAAI,CAAC,UAAC,UAAU;QAC/B,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,OAAO,GAAG,KAAK,UAAU,CAAC;SAC3B;QACD,OAAO,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAVW,QAAA,mBAAmB,uBAU9B;AAEK,IAAM,YAAY,GAAG,UAAC,WAAmB,EAAE,cAAwB;IACxE,IAAI,kBAAkB,GAAG,WAAW,CAAC;IACrC,IAAI;QACF,kBAAkB,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;KAC7C;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC;KACtD;IAED,OAAO,kBAAkB,CAAC;AAC5B,CAAC,CAAC;AAVW,QAAA,YAAY,gBAUvB","sourcesContent":["import { ILogger } from '../logger';\n\n/**\n * Checks if a given URL matches any pattern in an allowlist of URLs or regex patterns.\n * @param url - The URL to check\n * @param allowlist - Array of allowed URLs (strings) or regex patterns\n * @returns true if the URL matches any pattern in the allowlist, false otherwise\n */\nexport const isUrlMatchAllowlist = (url: string, allowlist: (string | RegExp)[] | undefined): boolean => {\n  if (!allowlist || !allowlist.length) {\n    return true;\n  }\n  return allowlist.some((allowedUrl) => {\n    if (typeof allowedUrl === 'string') {\n      return url === allowedUrl;\n    }\n    return url.match(allowedUrl);\n  });\n};\n\nexport const getDecodeURI = (locationStr: string, loggerProvider?: ILogger): string => {\n  let decodedLocationStr = locationStr;\n  try {\n    decodedLocationStr = decodeURI(locationStr);\n  } catch (e) {\n    /* istanbul ignore next */\n    loggerProvider?.error('Malformed URI sequence: ', e);\n  }\n\n  return decodedLocationStr;\n};\n"]}