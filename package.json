{
  "author": "Your Team",
  "dependencies": {
    "@amplitude/analytics-browser": "^2.35.0",
    "@amplitude/analytics-node": "^1.8.0",
    "@aws-sdk/client-dynamodb": "^3.1250.0",
    "@aws-sdk/client-s3": "^3.1250.0",
    "@aws-sdk/client-ses": "^3.1250.0",
    "@aws-sdk/client-sns": "^3.1250.0",
    "@aws-sdk/client-sqs": "^3.1250.0",
    "@azure/cosmos": "^4.8.0",
    "@azure/identity": "^4.15.0",
    "@azure/keyvault-secrets": "^4.12.0",
    "@azure/service-bus": "^8.0.0",
    "@azure/storage-blob": "^12.35.0",
    "@datadog/browser-logs": "^6.35.0",
    "@datadog/browser-rum": "^6.35.0",
    "@datadog/browser-rum-slim": "^6.35.0",
    "@google-cloud/firestore": "^7.15.0",
    "@google-cloud/logging": "^11.8.0",
    "@google-cloud/monitoring": "^5.8.0",
    "@google-cloud/pubsub": "^5.5.0",
    "@google-cloud/storage": "^7.20.0",
    "@opentelemetry/api": "^1.12.0",
    "@opentelemetry/auto-instrumentations-node": "^0.75.0",
    "@opentelemetry/exporter-metrics-otlp-http": "^0.220.0",
    "@opentelemetry/exporter-trace-otlp-http": "^0.220.0",
    "@opentelemetry/sdk-node": "^0.220.0",
    "@sentry/integrations": "^8.0.0",
    "@sentry/node": "^8.35.0",
    "@sentry/profiling-node": "^8.35.0",
    "@sentry/tracing": "^8.35.0",
    "@sentry/utils": "^8.35.0",
    "@supabase/supabase-js": "^2.95.0",
    "axios": "^1.7.0",
    "bcryptjs": "^3.0.2",
    "chalk": "^5.6.2",
    "commander": "^14.0.1",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^17.2.3",
    "express": "^5.1.0",
    "express-mongo-sanitize": "^2.2.0",
    "express-rate-limit": "^8.1.0",
    "express-slow-down": "^3.0.0",
    "express-validator": "^7.2.0",
    "firebase-admin": "^13.8.0",
    "google-auth-library": "^10.8.0",
    "helmet": "^8.1.0",
    "hpp": "^0.2.3",
    "http-proxy-middleware": "^3.0.5",
    "ioredis": "^5.8.1",
    "jose": "^6.1.0",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "mixpanel-browser": "^2.85.0",
    "moment": "^2.30.0",
    "moment-timezone": "^0.6.0",
    "mongoose": "^8.25.0",
    "newrelic": "^13.8.0",
    "node-cron": "^3.0.3",
    "node-fetch": "^3.3.2",
    "openai": "^4.125.0",
    "redis": "^5.8.3",
    "socket.io": "^4.8.1",
    "uuid": "^13.0.0",
    "winston": "^3.15.0",
    "winston-daily-rotate-file": "^5.0.0",
    "xss": "^1.0.14"
  },
  "description": "Infinite Match Unity Game with comprehensive automation and CI/CD",
  "devDependencies": {
    "@eslint/js": "^9.45.0",
    "@jest/globals": "^30.2.0",
    "@types/bcryptjs": "^2.4.6",
    "@types/compression": "^1.7.5",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.3",
    "@types/jest": "^30.0.0",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/node": "^24.7.2",
    "@types/supertest": "^6.0.2",
    "@typescript-eslint/eslint-plugin": "^8.55.0",
    "@typescript-eslint/parser": "^8.55.0",
    "eslint": "^9.45.0",
    "eslint-formatter-compact": "^8.40.0",
    "jest": "^30.2.0",
    "nodemon": "^3.0.2",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.6.2",
    "supertest": "^7.1.4",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.0"
  },
  "engines": {
    "node": ">=22.0.0"
  },
  "keywords": [
    "unity",
    "match3",
    "mobile-game",
    "automation",
    "ci-cd",
    "nodejs",
    "express",
    "ai",
    "free-ai",
    "ollama",
    "huggingface",
    "content-generation",
    "open-source"
  ],
  "license": "MIT",
  "main": "src/server/index.js",
  "name": "evergreen-match3-unity",
  "scripts": {
    "automation": "node scripts/refactored-automation.js",
    "automation:legacy": "node scripts/automation.js",
    "build": "tsc",
    "build:vercel": "echo 'Vercel build - copying WebGL files' && cp -r webgl/Build . && cp webgl/platform-detection.js . && echo 'WebGL files copied for Vercel deployment' && echo 'Build completed successfully'",
    "build:microservices": "docker-compose build",
    "build:production": "npm run build",
    "dashboard": "node scripts/deployment-dashboard.js",
    "deploy:all": "npm run health && npm run automation",
    "deploy:microservices": "docker-compose up -d",
    "dev": "nodemon --exec ts-node src/server/index.ts",
    "dev:industry-leader": "nodemon --exec ts-node src/server/index-industry-leader.js",
    "dev:microservices": "docker-compose -f docker-compose.dev.yml up",
    "error-recovery": "node scripts/error-recovery.js",
    "format": "prettier --write \"src/**/*.{js,ts,json}\"",
    "format:check": "prettier --check \"src/**/*.{js,ts,json}\"",
    "full-scan": "npm run security && npm run performance && npm run error-recovery",
    "full-status": "npm run status && npm run dashboard && npm run monitor",
    "health": "node scripts/refactored-health-check.js",
    "health:legacy": "node scripts/health-check.js",
    "lint": "eslint src/ --ext .js,.ts",
    "lint:fix": "eslint src/ --ext .js,.ts --fix",
    "live-ops:deploy": "echo 'Live ops deployment via GitHub Actions'",
    "live-ops:verify": "echo 'Live ops verification via GitHub Actions'",
    "monitor": "node scripts/health-monitor.js",
    "notify": "node scripts/notification-system.js",
    "performance": "node scripts/performance-monitor.js",
    "security": "node scripts/security-scanner.js",
    "start": "node dist/server/index.js",
    "start:dev": "ts-node src/server/index.ts",
    "start:industry-leader": "ts-node src/server/index-industry-leader.js",
    "start:microservices": "docker-compose up -d",
    "status": "node scripts/status-check.js",
    "cron:reconcile": "node scripts/cron/reconcile-purchases.js",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "test:e2e": "jest --config jest-e2e.json",
    "test:unity": "echo 'Unity tests run via GitHub Actions'",
    "unity:deploy": "node scripts/unity-deploy.js",
    "unity:secrets": "node scripts/unity/fetch-unity-secrets.js",
    "unity:deploy-cloud-code": "node scripts/unity/deploy-cloud-code.js",
    "unity:deploy-economy": "python3 scripts/unity/deploy-economy-with-credentials.py",
    "unity:deploy-all": "./unity-cli-working deploy-all",
    "unity:cloud:build": "node src/unity-cloud-cli-simple.js build $UNITY_TARGET",
    "unity:cloud:build:android": "node src/unity-cloud-cli-simple.js build android",
    "unity:cloud:build:ios": "node src/unity-cloud-cli-simple.js build ios",
    "unity:cloud:trigger:android": "./unity-wrapper trigger android",
    "unity:cloud:trigger:ios": "./unity-wrapper trigger ios",
    "unity:cloud:trigger:both": "npm-run-all -p unity:cloud:trigger:android unity:cloud:trigger:ios",
    "unity:cloud:status": "node src/unity-cloud-cli-simple.js build-status $UNITY_TARGET",
    "unity:cloud:status:android": "node src/unity-cloud-cli-simple.js build-status android",
    "unity:cloud:status:ios": "node src/unity-cloud-cli-simple.js build-status ios",
    "unity:cloud:download": "node src/unity-cloud-cli-simple.js build-download $UNITY_TARGET",
    "unity:cloud:download:android": "node src/unity-cloud-cli-simple.js build-download android",
    "unity:cloud:download:ios": "node src/unity-cloud-cli-simple.js build-download ios",
    "unity:cloud:list": "node src/unity-cloud-cli-simple.js build-list",
    "arpu:start": "node scripts/arpu-integration.js",
    "arpu:test": "node scripts/test-arpu-systems.js",
    "arpu:monitor": "node scripts/monitor-arpu.js",
    "sync:all": "./sync-all-versions.sh",
    "deploy:vercel": "npm run sync:all && npm run build:vercel",
    "build:webgl:vercel": "./build-webgl-vercel.sh",
    "build:webgl:webgl": "./build-webgl-webgl.sh",
    "build:webgl:poki": "./build-webgl-poki.sh",
    "build:webgl:all": "./build-all-webgl.sh",
    "configure:webgl": "./configure-webgl-build-paths.sh",
    "refactor:lint": "node scripts/refactor-lint.js",
    "refactor:check": "npm run lint && npm run format:check && npm run test",
    "refactor:fix": "npm run lint:fix && npm run format && npm run build",
    "refactor:full": "npm run refactor:fix && npm run refactor:lint && npm run test:coverage",
    "platform:optimize": "node scripts/optimize-platforms.js",
    "platform:detect": "node -e \"console.log('Platform detection available at /api/platform/detect')\"",
    "platform:build": "npm run platform:optimize && npm run build",
    "platform:test": "npm run platform:optimize && npm run test",
    "platform:deploy": "npm run platform:optimize && npm run build && npm run deploy:vercel",
    "ai:content:generate": "node -e \"console.log('AI Content Generation available at /api/content/generate')\"",
    "ai:personalization": "node -e \"console.log('AI Personalization available at /api/personalization')\"",
    "ai:analytics": "node -e \"console.log('AI Analytics available at /api/analytics')\"",
    "ai:market-research": "node -e \"console.log('Market Research available at /api/market')\"",
    "ai:insights": "node -e \"console.log('AI Insights available at /api/insights')\"",
    "ai:recommendations": "node -e \"console.log('AI Recommendations available at /api/ai/recommendations')\"",
    "ai:start": "npm run start:industry-leader",
    "ai:dev": "npm run dev:industry-leader",
    "ai:free:setup": "chmod +x scripts/setup-free-ai.sh && ./scripts/setup-free-ai.sh",
    "ai:free:test": "node examples/free-ai-example.js",
    "ai:free:status": "node -e \"import('./src/services/free-ai-content-generator.js').then(m => { const ai = new m.FreeAIContentGenerator(); console.log('Free AI Status:', ai.getServiceStatus()); })\"",
    "ai:free:example": "node examples/free-ai-example.js"
  },
  "type": "module",
  "version": "1.0.0"
}
