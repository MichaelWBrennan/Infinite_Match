#!/bin/bash
# Unity Cloud Build CLI Wrapper
# Uses Unity Cloud Build REST API instead of local Unity editor commands
# Zero local Unity installation dependency

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# API Configuration
API_BASE_URL="https://build-api.cloud.unity3d.com/api/v1"
UNITY_ORG_ID="${UNITY_ORG_ID}"
UNITY_PROJECT_ID="${UNITY_PROJECT_ID}"
UNITY_API_TOKEN="${UNITY_API_TOKEN}"

# Validate required environment variables
validate_env() {
    if [ -z "$UNITY_ORG_ID" ]; then
        echo -e "${RED}‚ùå Error: UNITY_ORG_ID environment variable is required${NC}"
        exit 1
    fi
    if [ -z "$UNITY_PROJECT_ID" ]; then
        echo -e "${RED}‚ùå Error: UNITY_PROJECT_ID environment variable is required${NC}"
        exit 1
    fi
    if [ -z "$UNITY_API_TOKEN" ]; then
        echo -e "${RED}‚ùå Error: UNITY_API_TOKEN environment variable is required${NC}"
        exit 1
    fi
}

# Check if jq is available
check_dependencies() {
    if ! command -v jq &> /dev/null; then
        echo -e "${RED}‚ùå Error: jq is required but not installed${NC}"
        echo "Please install jq: https://stedolan.github.io/jq/"
        exit 1
    fi
    if ! command -v curl &> /dev/null; then
        echo -e "${RED}‚ùå Error: curl is required but not installed${NC}"
        exit 1
    fi
}

# Make API request with error handling
api_request() {
    local method="$1"
    local url="$2"
    local data="$3"
    
    local curl_cmd="curl -s -X $method"
    curl_cmd="$curl_cmd -H 'Authorization: Bearer $UNITY_API_TOKEN'"
    curl_cmd="$curl_cmd -H 'Content-Type: application/json'"
    
    if [ -n "$data" ]; then
        curl_cmd="$curl_cmd -d '$data'"
    fi
    
    curl_cmd="$curl_cmd '$url'"
    
    eval "$curl_cmd"
}

# Build command
build_command() {
    local target="$1"
    
    if [ -z "$target" ]; then
        echo -e "${RED}‚ùå Error: Build target is required${NC}"
        echo "Usage: $0 build <target>"
        echo "Example: $0 build webgl"
        exit 1
    fi
    
    echo -e "${BLUE}üöÄ Triggering Unity Cloud Build for target: $target${NC}"
    
    # Trigger build
    local response=$(api_request "POST" \
        "$API_BASE_URL/orgs/$UNITY_ORG_ID/projects/$UNITY_PROJECT_ID/buildtargets/$target/builds" \
        '{"clean":true}')
    
    # Check if response contains error
    if echo "$response" | jq -e '.error' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Build trigger failed:${NC}"
        echo "$response" | jq -r '.error.message // .error'
        exit 1
    fi
    
    local build_id=$(echo "$response" | jq -r '.build')
    
    if [ "$build_id" = "null" ] || [ -z "$build_id" ]; then
        echo -e "${RED}‚ùå Failed to get build ID from response${NC}"
        echo "Response: $response"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Build started (ID: $build_id)${NC}"
    
    # Poll for completion
    echo -e "${YELLOW}‚è≥ Monitoring build progress...${NC}"
    while true; do
        local status_response=$(api_request "GET" \
            "$API_BASE_URL/orgs/$UNITY_ORG_ID/projects/$UNITY_PROJECT_ID/buildtargets/$target/builds/$build_id")
        
        local status=$(echo "$status_response" | jq -r '.buildStatus')
        
        if [ "$status" = "null" ] || [ -z "$status" ]; then
            echo -e "${RED}‚ùå Failed to get build status${NC}"
            echo "Response: $status_response"
            exit 1
        fi
        
        echo -e "${BLUE}üìä Status: $status${NC}"
        
        case "$status" in
            "success")
                echo -e "${GREEN}‚úÖ Build succeeded!${NC}"
                exit 0
                ;;
            "failure"|"failed")
                echo -e "${RED}‚ùå Build failed${NC}"
                exit 1
                ;;
            "canceled"|"cancelled")
                echo -e "${YELLOW}‚ö†Ô∏è Build was canceled${NC}"
                exit 1
                ;;
            "queued"|"sentToBuilder"|"started"|"restarted")
                echo -e "${YELLOW}‚è≥ Build in progress... waiting 30 seconds${NC}"
                sleep 30
                ;;
            *)
                echo -e "${YELLOW}‚è≥ Unknown status '$status'... waiting 30 seconds${NC}"
                sleep 30
                ;;
        esac
    done
}

# Status command
status_command() {
    local target="$1"
    
    if [ -z "$target" ]; then
        echo -e "${RED}‚ùå Error: Build target is required${NC}"
        echo "Usage: $0 status <target>"
        echo "Example: $0 status webgl"
        exit 1
    fi
    
    echo -e "${BLUE}üìä Getting latest build status for target: $target${NC}"
    
    local response=$(api_request "GET" \
        "$API_BASE_URL/orgs/$UNITY_ORG_ID/projects/$UNITY_PROJECT_ID/buildtargets/$target/builds/latest")
    
    # Check if response contains error
    if echo "$response" | jq -e '.error' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Status check failed:${NC}"
        echo "$response" | jq -r '.error.message // .error'
        exit 1
    fi
    
    # Check if build exists
    if echo "$response" | jq -e '.build' > /dev/null 2>&1; then
        echo -e "${GREEN}üìã Latest Build Information:${NC}"
        echo "$response" | jq -r '{
            build: .build,
            status: .buildStatus,
            platform: .platform,
            started: .created,
            finished: .finished,
            duration: (.finished // "" | if . != "" then ((. | strptime("%Y-%m-%dT%H:%M:%S") | mktime) - (.created | strptime("%Y-%m-%dT%H:%M:%S") | mktime)) else "N/A" end)
        }'
    else
        echo -e "${YELLOW}‚ö†Ô∏è No builds found for target: $target${NC}"
    fi
}

# Download command
download_command() {
    local target="$1"
    
    if [ -z "$target" ]; then
        echo -e "${RED}‚ùå Error: Build target is required${NC}"
        echo "Usage: $0 download <target>"
        echo "Example: $0 download webgl"
        exit 1
    fi
    
    echo -e "${BLUE}üì• Getting download URL for latest build of target: $target${NC}"
    
    local response=$(api_request "GET" \
        "$API_BASE_URL/orgs/$UNITY_ORG_ID/projects/$UNITY_PROJECT_ID/buildtargets/$target/builds/latest/artifacts")
    
    # Check if response contains error
    if echo "$response" | jq -e '.error' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Download URL retrieval failed:${NC}"
        echo "$response" | jq -r '.error.message // .error'
        exit 1
    fi
    
    # Check if artifacts exist
    if echo "$response" | jq -e '.[0].files[0].href' > /dev/null 2>&1; then
        local download_url=$(echo "$response" | jq -r '.[0].files[0].href')
        echo -e "${GREEN}‚úÖ Download URL:${NC}"
        echo "$download_url"
        
        # Optional: Download the file
        read -p "Do you want to download the build now? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            local filename="build_${target}_$(date +%Y%m%d_%H%M%S).zip"
            echo -e "${BLUE}üì• Downloading to: $filename${NC}"
            curl -L -o "$filename" "$download_url"
            echo -e "${GREEN}‚úÖ Download completed: $filename${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è No artifacts found for latest build of target: $target${NC}"
    fi
}

# List available build targets
list_targets_command() {
    echo -e "${BLUE}üìã Getting available build targets...${NC}"
    
    local response=$(api_request "GET" \
        "$API_BASE_URL/orgs/$UNITY_ORG_ID/projects/$UNITY_PROJECT_ID/buildtargets")
    
    # Check if response contains error
    if echo "$response" | jq -e '.error' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Failed to get build targets:${NC}"
        echo "$response" | jq -r '.error.message // .error'
        exit 1
    fi
    
    echo -e "${GREEN}üéØ Available Build Targets:${NC}"
    echo "$response" | jq -r '.[] | {
        name: .name,
        platform: .platform,
        enabled: .enabled,
        lastBuild: (.lastBuild // "Never")
    }'
}

# Help command
help_command() {
    echo -e "${BLUE}üéØ Unity Cloud Build CLI Wrapper${NC}"
    echo "=================================="
    echo ""
    echo -e "${YELLOW}Available commands:${NC}"
    echo "  build <target>     - Trigger a Unity Cloud Build for the specified target"
    echo "  status <target>    - Get the status of the latest build for the target"
    echo "  download <target>  - Get the download URL for the latest build"
    echo "  list               - List all available build targets"
    echo "  help               - Show this help message"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  $0 build webgl"
    echo "  $0 status webgl"
    echo "  $0 download webgl"
    echo "  $0 list"
    echo ""
    echo -e "${YELLOW}Environment Variables:${NC}"
    echo "  UNITY_ORG_ID       - Your Unity organization ID"
    echo "  UNITY_PROJECT_ID   - Your Unity project ID"
    echo "  UNITY_API_TOKEN    - Your Unity API token"
    echo ""
    echo -e "${YELLOW}Note:${NC} This wrapper uses the Unity Cloud Build REST API"
    echo "      and requires no local Unity installation."
}

# Main command handling
main() {
    # Validate environment and dependencies
    validate_env
    check_dependencies
    
    case "$1" in
        "build")
            build_command "$2"
            ;;
        "status")
            status_command "$2"
            ;;
        "download")
            download_command "$2"
            ;;
        "list")
            list_targets_command
            ;;
        "help"|"--help"|"-h"|"")
            help_command
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo ""
            help_command
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"