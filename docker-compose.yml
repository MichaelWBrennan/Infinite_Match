version: '3.8'

services:
  # Main API Gateway for Mobile
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/evergreen_match3
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://mongodb:27017/evergreen_match3
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - game-network
    restart: unless-stopped

  # Game Service
  game-service:
    build:
      context: .
      dockerfile: docker/game-service/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/evergreen_match3
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - game-network
    restart: unless-stopped

  # Economy Service
  economy-service:
    build:
      context: .
      dockerfile: docker/economy-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/evergreen_match3
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - game-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: docker/analytics-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/evergreen_match3
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - game-network
    restart: unless-stopped

  # Security Service
  security-service:
    build:
      context: .
      dockerfile: docker/security-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/evergreen_match3
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - game-network
    restart: unless-stopped

  # Unity Cloud Service
  unity-service:
    build:
      context: .
      dockerfile: docker/unity-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - UNITY_PROJECT_ID=${UNITY_PROJECT_ID}
      - UNITY_ENV_ID=${UNITY_ENV_ID}
      - UNITY_ORG_ID=${UNITY_ORG_ID}
      - UNITY_CLIENT_ID=${UNITY_CLIENT_ID}
      - UNITY_CLIENT_SECRET=${UNITY_CLIENT_SECRET}
      - UNITY_API_TOKEN=${UNITY_API_TOKEN}
    networks:
      - game-network
    restart: unless-stopped

  # AI Service for Mobile Game Analytics
  ai-service:
    build:
      context: .
      dockerfile: docker/ai-service/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/evergreen_match3
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - game-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=evergreen_match3
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - game-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - game-network
    restart: unless-stopped

  # MongoDB for Analytics
  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - game-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - game-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - game-network
    restart: unless-stopped

  # Nginx Load Balancer for Mobile APIs
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - game-service
      - economy-service
      - analytics-service
      - security-service
      - unity-service
      - ai-service
    networks:
      - game-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  game-network:
    driver: bridge