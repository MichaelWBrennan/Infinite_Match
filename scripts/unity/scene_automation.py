#!/usr/bin/env python3
"""
Scene Automation
Automates Unity scene setup without Unity Editor
"""

import json
import os
import subprocess
from pathlib import Path

import yaml


class SceneAutomation:
    def __init__(self):
        self.repo_root = Path(__file__).parent.parent.parent
        self.unity_assets = self.repo_root / "unity" / "Assets"
        self.scenes_dir = self.unity_assets / "Scenes"

    def print_header(self, title):
        """Print formatted header"""
        print("\n" + "=" * 80)
        print(f"üé¨ {title}")
        print("=" * 80)

    def setup_scene_lighting(self):
        """Setup scene lighting configuration"""
        print("üí° Setting up scene lighting...")

        # Create lighting configuration
        lighting_config = {
            "lighting_settings": {
                "environment_lighting": {
                    "environment_mode": "Skybox",
                    "environment_lighting_mode": "Baked",
                    "environment_lighting_intensity": 1.0,
                    "environment_lighting_color": [1.0, 1.0, 1.0, 1.0],
                },
                "lightmap_settings": {
                    "enable_baked_lightmaps": True,
                    "enable_realtime_lightmaps": False,
                    "bake_resolution": 40,
                    "lightmap_parameters": "Default-Medium",
                    "lightmaps_bake_mode": "Mixed",
                    "bake_backend": "ProgressiveCPU",
                },
                "reflection_probes": {
                    "enable_reflection_probes": True,
                    "reflection_compression": "Compressed",
                    "reflection_bounces": 1,
                    "reflection_intensity": 1.0,
                },
                "light_probes": {
                    "enable_light_probes": True,
                    "light_probe_sample_count_multiplier": 4,
                },
            },
            "scene_lighting": {
                "main_light": {
                    "type": "Directional",
                    "color": [1.0, 0.95, 0.8, 1.0],
                    "intensity": 1.0,
                    "shadows": "Soft",
                    "shadow_resolution": "High",
                },
                "ambient_light": {
                    "skybox_color": [0.5, 0.7, 1.0, 1.0],
                    "ambient_mode": "Skybox",
                    "ambient_intensity": 1.0,
                },
            },
        }

        # Save lighting configuration
        lighting_file = self.scenes_dir / "LightingConfig.json"

        with open(lighting_file, "w") as f:
            json.dump(lighting_config, f, indent=2)

        print(f"‚úÖ Scene lighting configured: {lighting_file}")
        return True

    def setup_scene_physics(self):
        """Setup scene physics configuration"""
        print("‚ö° Setting up scene physics...")

        # Create physics configuration
        physics_config = {
            "physics_settings": {
                "gravity": [0, -9.81, 0],
                "default_material": {
                    "dynamic_friction": 0.6,
                    "static_friction": 0.6,
                    "bounciness": 0.0,
                    "friction_combine": "Average",
                    "bounce_combine": "Average",
                },
                "collision_detection": {
                    "default_collision_detection": "Discrete",
                    "default_solver_iterations": 6,
                    "default_solver_velocity_iterations": 1,
                },
            },
            "collision_layers": {
                "Default": 0,
                "TransparentFX": 1,
                "Ignore Raycast": 2,
                "Water": 4,
                "UI": 5,
                "Player": 8,
                "Enemy": 9,
                "Pickup": 10,
                "Ground": 11,
                "Wall": 12,
            },
            "physics_materials": {
                "default_physics_material": {
                    "dynamic_friction": 0.6,
                    "static_friction": 0.6,
                    "bounciness": 0.0,
                },
                "ice_physics_material": {
                    "dynamic_friction": 0.1,
                    "static_friction": 0.1,
                    "bounciness": 0.0,
                },
                "bouncy_physics_material": {
                    "dynamic_friction": 0.6,
                    "static_friction": 0.6,
                    "bounciness": 0.8,
                },
            },
        }

        # Save physics configuration
        physics_file = self.scenes_dir / "PhysicsConfig.json"

        with open(physics_file, "w") as f:
            json.dump(physics_config, f, indent=2)

        print(f"‚úÖ Scene physics configured: {physics_file}")
        return True

    def setup_scene_audio(self):
        """Setup scene audio configuration"""
        print("üîä Setting up scene audio...")

        # Create audio configuration
        audio_config = {
            "audio_settings": {
                "audio_listener": {"volume": 1.0, "paused": False},
                "audio_mixer": {
                    "master_volume": 1.0,
                    "music_volume": 0.8,
                    "sfx_volume": 1.0,
                    "voice_volume": 1.0,
                },
            },
            "audio_sources": {
                "background_music": {
                    "clip": "Audio/Music/background_music",
                    "volume": 0.8,
                    "pitch": 1.0,
                    "loop": True,
                    "play_on_awake": True,
                    "spatial_blend": 0.0,
                },
                "ambient_sounds": {
                    "clip": "Audio/Ambient/ambient_sounds",
                    "volume": 0.6,
                    "pitch": 1.0,
                    "loop": True,
                    "play_on_awake": True,
                    "spatial_blend": 0.0,
                },
            },
            "spatial_audio": {
                "enable_3d_sound": True,
                "doppler_factor": 1.0,
                "speed_of_sound": 343.0,
                "rolloff_mode": "Logarithmic",
            },
        }

        # Save audio configuration
        audio_file = self.scenes_dir / "AudioConfig.json"

        with open(audio_file, "w") as f:
            json.dump(audio_config, f, indent=2)

        print(f"‚úÖ Scene audio configured: {audio_file}")
        return True

    def setup_scene_ui(self):
        """Setup scene UI configuration"""
        print("üñ•Ô∏è Setting up scene UI...")

        # Create UI configuration
        ui_config = {
            "ui_settings": {
                "canvas_scaler": {
                    "ui_scale_mode": "ScaleWithScreenSize",
                    "reference_resolution": [1920, 1080],
                    "screen_match_mode": "MatchWidthOrHeight",
                    "match_width_or_height": 0.5,
                },
                "graphic_raycaster": {
                    "ignore_reversed_graphics": True,
                    "blocking_objects": "TwoD",
                },
            },
            "ui_elements": {
                "main_menu": {
                    "canvas": "MainMenuCanvas",
                    "sorting_order": 0,
                    "render_mode": "ScreenSpaceOverlay",
                },
                "gameplay_ui": {
                    "canvas": "GameplayCanvas",
                    "sorting_order": 1,
                    "render_mode": "ScreenSpaceOverlay",
                },
                "pause_menu": {
                    "canvas": "PauseMenuCanvas",
                    "sorting_order": 2,
                    "render_mode": "ScreenSpaceOverlay",
                },
            },
            "responsive_ui": {
                "enable_responsive": True,
                "breakpoints": {
                    "mobile": [720, 1280],
                    "tablet": [1024, 768],
                    "desktop": [1920, 1080],
                },
            },
        }

        # Save UI configuration
        ui_file = self.scenes_dir / "UIConfig.json"

        with open(ui_file, "w") as f:
            json.dump(ui_config, f, indent=2)

        print(f"‚úÖ Scene UI configured: {ui_file}")
        return True

    def setup_scene_optimization(self):
        """Setup scene optimization settings"""
        print("üöÄ Setting up scene optimization...")

        # Create optimization configuration
        optimization_config = {
            "occlusion_culling": {
                "enable_occlusion_culling": True,
                "occlusion_culling_data": "OcclusionCullingData.asset",
                "smallest_occluder": 5.0,
                "smallest_hole": 0.25,
            },
            "lod_settings": {
                "enable_lod_bias": True,
                "lod_bias": 1.0,
                "maximum_lod_level": 0,
                "lod_cross_fade_animation_mode": "None",
            },
            "batching": {
                "enable_static_batching": True,
                "enable_dynamic_batching": True,
                "enable_gpu_instancing": True,
            },
            "culling": {
                "enable_frustum_culling": True,
                "enable_occlusion_culling": True,
                "culling_mask": "Everything",
            },
        }

        # Save optimization configuration
        optimization_file = self.scenes_dir / "OptimizationConfig.json"

        with open(optimization_file, "w") as f:
            json.dump(optimization_config, f, indent=2)

        print(f"‚úÖ Scene optimization configured: {optimization_file}")
        return True

    def create_scene_automation_script(self):
        """Create Unity Editor script for scene automation"""
        print("üìù Creating scene automation script...")

        script_content = """
using UnityEngine;
using UnityEditor;
using UnityEngine.SceneManagement;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using System.IO;
using System.Collections.Generic;

namespace Evergreen.Editor
{
    public class SceneAutomation : EditorWindow
    {
        [MenuItem("Tools/Scene/Automate Everything")]
        public static void ShowWindow()
        {
            GetWindow<SceneAutomation>("Scene Automation");
        }

        private void OnGUI()
        {
            GUILayout.Label("Scene Automation", EditorStyles.boldLabel);
            GUILayout.Space(10);

            if (GUILayout.Button("üí° Setup Lighting", GUILayout.Height(30)))
            {
                SetupLighting();
            }

            if (GUILayout.Button("‚ö° Setup Physics", GUILayout.Height(30)))
            {
                SetupPhysics();
            }

            if (GUILayout.Button("üîä Setup Audio", GUILayout.Height(30)))
            {
                SetupAudio();
            }

            if (GUILayout.Button("üñ•Ô∏è Setup UI", GUILayout.Height(30)))
            {
                SetupUI();
            }

            if (GUILayout.Button("üöÄ Optimize Scene", GUILayout.Height(30)))
            {
                OptimizeScene();
            }

            if (GUILayout.Button("üéØ Run Full Automation", GUILayout.Height(40)))
            {
                RunFullAutomation();
            }
        }

        private static void SetupLighting()
        {
            try
            {
                Debug.Log("üí° Setting up scene lighting...");

                // Load lighting configuration
                string configPath = "Assets/Scenes/LightingConfig.json";
                if (File.Exists(configPath))
                {
                    string json = File.ReadAllText(configPath);
                    var config = JsonUtility.FromJson<LightingConfig>(json);

                    // Apply lighting settings
                    ApplyLightingSettings(config);

                    Debug.Log("‚úÖ Scene lighting setup completed!");
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è LightingConfig.json not found");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Lighting setup failed: {e.Message}");
            }
        }

        private static void ApplyLightingSettings(LightingConfig config)
        {
            // Apply lighting settings
            RenderSettings.ambientMode = UnityEngine.Rendering.AmbientMode.Skybox;
            RenderSettings.ambientIntensity = config.lighting_settings.environment_lighting.environment_lighting_intensity;

            // Setup main light
            var mainLight = FindObjectOfType<Light>();
            if (mainLight != null)
            {
                mainLight.type = LightType.Directional;
                mainLight.color = new Color(
                    config.scene_lighting.main_light.color[0],
                    config.scene_lighting.main_light.color[1],
                    config.scene_lighting.main_light.color[2],
                    config.scene_lighting.main_light.color[3]
                );
                mainLight.intensity = config.scene_lighting.main_light.intensity;
                mainLight.shadows = LightShadows.Soft;
            }

            Debug.Log("üí° Lighting settings applied");
        }

        private static void SetupPhysics()
        {
            try
            {
                Debug.Log("‚ö° Setting up scene physics...");

                // Load physics configuration
                string configPath = "Assets/Scenes/PhysicsConfig.json";
                if (File.Exists(configPath))
                {
                    string json = File.ReadAllText(configPath);
                    var config = JsonUtility.FromJson<PhysicsConfig>(json);

                    // Apply physics settings
                    ApplyPhysicsSettings(config);

                    Debug.Log("‚úÖ Scene physics setup completed!");
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è PhysicsConfig.json not found");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Physics setup failed: {e.Message}");
            }
        }

        private static void ApplyPhysicsSettings(PhysicsConfig config)
        {
            // Apply physics settings
            Physics.gravity = new Vector3(
                config.physics_settings.gravity[0],
                config.physics_settings.gravity[1],
                config.physics_settings.gravity[2]
            );

            Debug.Log("‚ö° Physics settings applied");
        }

        private static void SetupAudio()
        {
            try
            {
                Debug.Log("üîä Setting up scene audio...");

                // Load audio configuration
                string configPath = "Assets/Scenes/AudioConfig.json";
                if (File.Exists(configPath))
                {
                    string json = File.ReadAllText(configPath);
                    var config = JsonUtility.FromJson<AudioConfig>(json);

                    // Apply audio settings
                    ApplyAudioSettings(config);

                    Debug.Log("‚úÖ Scene audio setup completed!");
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è AudioConfig.json not found");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Audio setup failed: {e.Message}");
            }
        }

        private static void ApplyAudioSettings(AudioConfig config)
        {
            // Apply audio settings
            var audioListener = FindObjectOfType<AudioListener>();
            if (audioListener != null)
            {
                audioListener.volume = config.audio_settings.audio_listener.volume;
            }

            Debug.Log("üîä Audio settings applied");
        }

        private static void SetupUI()
        {
            try
            {
                Debug.Log("üñ•Ô∏è Setting up scene UI...");

                // Load UI configuration
                string configPath = "Assets/Scenes/UIConfig.json";
                if (File.Exists(configPath))
                {
                    string json = File.ReadAllText(configPath);
                    var config = JsonUtility.FromJson<UIConfig>(json);

                    // Apply UI settings
                    ApplyUISettings(config);

                    Debug.Log("‚úÖ Scene UI setup completed!");
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è UIConfig.json not found");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå UI setup failed: {e.Message}");
            }
        }

        private static void ApplyUISettings(UIConfig config)
        {
            // Apply UI settings
            var canvases = FindObjectsOfType<Canvas>();
            foreach (var canvas in canvases)
            {
                var scaler = canvas.GetComponent<CanvasScaler>();
                if (scaler != null)
                {
                    scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
                    scaler.referenceResolution = new Vector2(
                        config.ui_settings.canvas_scaler.reference_resolution[0],
                        config.ui_settings.canvas_scaler.reference_resolution[1]
                    );
                }
            }

            Debug.Log("üñ•Ô∏è UI settings applied");
        }

        private static void OptimizeScene()
        {
            try
            {
                Debug.Log("üöÄ Optimizing scene...");

                // Load optimization configuration
                string configPath = "Assets/Scenes/OptimizationConfig.json";
                if (File.Exists(configPath))
                {
                    string json = File.ReadAllText(configPath);
                    var config = JsonUtility.FromJson<OptimizationConfig>(json);

                    // Apply optimization settings
                    ApplyOptimizationSettings(config);

                    Debug.Log("‚úÖ Scene optimization completed!");
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è OptimizationConfig.json not found");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Scene optimization failed: {e.Message}");
            }
        }

        private static void ApplyOptimizationSettings(OptimizationConfig config)
        {
            // Apply optimization settings
            if (config.occlusion_culling.enable_occlusion_culling)
            {
                Debug.Log("üöÄ Occlusion culling enabled");
            }

            if (config.lod_settings.enable_lod_bias)
            {
                QualitySettings.lodBias = config.lod_settings.lod_bias;
            }

            if (config.batching.enable_static_batching)
            {
                Debug.Log("üöÄ Static batching enabled");
            }

            Debug.Log("üöÄ Optimization settings applied");
        }

        private static void RunFullAutomation()
        {
            try
            {
                Debug.Log("üéØ Running full scene automation...");

                SetupLighting();
                SetupPhysics();
                SetupAudio();
                SetupUI();
                OptimizeScene();

                Debug.Log("üéâ Full scene automation completed!");
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Full automation failed: {e.Message}");
            }
        }
    }

    // Data structures for JSON deserialization
    [System.Serializable]
    public class LightingConfig
    {
        public LightingSettings lighting_settings;
        public SceneLighting scene_lighting;
    }

    [System.Serializable]
    public class LightingSettings
    {
        public EnvironmentLighting environment_lighting;
        public LightmapSettings lightmap_settings;
        public ReflectionProbes reflection_probes;
        public LightProbes light_probes;
    }

    [System.Serializable]
    public class EnvironmentLighting
    {
        public string environment_mode;
        public string environment_lighting_mode;
        public float environment_lighting_intensity;
        public float[] environment_lighting_color;
    }

    [System.Serializable]
    public class LightmapSettings
    {
        public bool enable_baked_lightmaps;
        public bool enable_realtime_lightmaps;
        public int bake_resolution;
        public string lightmap_parameters;
        public string lightmaps_bake_mode;
        public string bake_backend;
    }

    [System.Serializable]
    public class ReflectionProbes
    {
        public bool enable_reflection_probes;
        public string reflection_compression;
        public int reflection_bounces;
        public float reflection_intensity;
    }

    [System.Serializable]
    public class LightProbes
    {
        public bool enable_light_probes;
        public int light_probe_sample_count_multiplier;
    }

    [System.Serializable]
    public class SceneLighting
    {
        public MainLight main_light;
        public AmbientLight ambient_light;
    }

    [System.Serializable]
    public class MainLight
    {
        public string type;
        public float[] color;
        public float intensity;
        public string shadows;
        public string shadow_resolution;
    }

    [System.Serializable]
    public class AmbientLight
    {
        public float[] skybox_color;
        public string ambient_mode;
        public float ambient_intensity;
    }

    [System.Serializable]
    public class PhysicsConfig
    {
        public PhysicsSettings physics_settings;
        public Dictionary<string, int> collision_layers;
        public Dictionary<string, PhysicsMaterial> physics_materials;
    }

    [System.Serializable]
    public class PhysicsSettings
    {
        public float[] gravity;
        public PhysicsMaterial default_material;
        public CollisionDetection collision_detection;
    }

    [System.Serializable]
    public class PhysicsMaterial
    {
        public float dynamic_friction;
        public float static_friction;
        public float bounciness;
        public string friction_combine;
        public string bounce_combine;
    }

    [System.Serializable]
    public class CollisionDetection
    {
        public string default_collision_detection;
        public int default_solver_iterations;
        public int default_solver_velocity_iterations;
    }

    [System.Serializable]
    public class AudioConfig
    {
        public AudioSettings audio_settings;
        public Dictionary<string, AudioSource> audio_sources;
        public SpatialAudio spatial_audio;
    }

    [System.Serializable]
    public class AudioSettings
    {
        public AudioListener audio_listener;
        public AudioMixer audio_mixer;
    }

    [System.Serializable]
    public class AudioListener
    {
        public float volume;
        public bool paused;
    }

    [System.Serializable]
    public class AudioMixer
    {
        public float master_volume;
        public float music_volume;
        public float sfx_volume;
        public float voice_volume;
    }

    [System.Serializable]
    public class AudioSource
    {
        public string clip;
        public float volume;
        public float pitch;
        public bool loop;
        public bool play_on_awake;
        public float spatial_blend;
    }

    [System.Serializable]
    public class SpatialAudio
    {
        public bool enable_3d_sound;
        public float doppler_factor;
        public float speed_of_sound;
        public string rolloff_mode;
    }

    [System.Serializable]
    public class UIConfig
    {
        public UISettings ui_settings;
        public Dictionary<string, UIElement> ui_elements;
        public ResponsiveUI responsive_ui;
    }

    [System.Serializable]
    public class UISettings
    {
        public CanvasScaler canvas_scaler;
        public GraphicRaycaster graphic_raycaster;
    }

    [System.Serializable]
    public class CanvasScaler
    {
        public string ui_scale_mode;
        public int[] reference_resolution;
        public string screen_match_mode;
        public float match_width_or_height;
    }

    [System.Serializable]
    public class GraphicRaycaster
    {
        public bool ignore_reversed_graphics;
        public string blocking_objects;
    }

    [System.Serializable]
    public class UIElement
    {
        public string canvas;
        public int sorting_order;
        public string render_mode;
    }

    [System.Serializable]
    public class ResponsiveUI
    {
        public bool enable_responsive;
        public Dictionary<string, int[]> breakpoints;
    }

    [System.Serializable]
    public class OptimizationConfig
    {
        public OcclusionCulling occlusion_culling;
        public LODSettings lod_settings;
        public Batching batching;
        public Culling culling;
    }

    [System.Serializable]
    public class OcclusionCulling
    {
        public bool enable_occlusion_culling;
        public string occlusion_culling_data;
        public float smallest_occluder;
        public float smallest_hole;
    }

    [System.Serializable]
    public class LODSettings
    {
        public bool enable_lod_bias;
        public float lod_bias;
        public int maximum_lod_level;
        public string lod_cross_fade_animation_mode;
    }

    [System.Serializable]
    public class Batching
    {
        public bool enable_static_batching;
        public bool enable_dynamic_batching;
        public bool enable_gpu_instancing;
    }

    [System.Serializable]
    public class Culling
    {
        public bool enable_frustum_culling;
        public bool enable_occlusion_culling;
        public string culling_mask;
    }
}
"""

        # Save Unity Editor script
        script_path = self.unity_assets / "Editor" / "SceneAutomation.cs"
        script_path.parent.mkdir(parents=True, exist_ok=True)

        with open(script_path, "w") as f:
            f.write(script_content)

        print(f"‚úÖ Scene automation script created: {script_path}")
        return True

    def run_full_automation(self):
        """Run complete scene automation"""
        self.print_header("Scene Full Automation")

        print("üéØ This will automate the complete Unity scene setup")
        print("   - Scene lighting configuration")
        print("   - Physics settings setup")
        print("   - Audio system configuration")
        print("   - UI system setup")
        print("   - Scene optimization")

        success = True

        # Run all automation steps
        success &= self.setup_scene_lighting()
        success &= self.setup_scene_physics()
        success &= self.setup_scene_audio()
        success &= self.setup_scene_ui()
        success &= self.setup_scene_optimization()
        success &= self.create_scene_automation_script()

        if success:
            print("\nüéâ Scene automation completed successfully!")
            print("‚úÖ Scene lighting configured")
            print("‚úÖ Physics settings applied")
            print("‚úÖ Audio system setup")
            print("‚úÖ UI system configured")
            print("‚úÖ Scene optimization applied")
            print("‚úÖ Unity Editor automation script created")
        else:
            print("\n‚ö†Ô∏è Some scene automation steps failed")

        return success


if __name__ == "__main__":
    automation = SceneAutomation()
    automation.run_full_automation()
