name: Unity Mobile Build & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build and deploy'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - android
          - ios
      track:
        description: 'Deployment track'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production

env:
  UNITY_VERSION: 2022.3.20f1
  ANDROID_BUILD_PATH: build/Android
  IOS_BUILD_PATH: build/iOS
  CHANGELOG_PATH: build/changelog.txt

jobs:
  # Generate changelog from latest commit
  generate-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.content }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Generate Changelog
        id: changelog
        run: |
          # Create build directory
          mkdir -p build
          
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_HASH=$(git log -1 --pretty=%h)
          COMMIT_DATE=$(git log -1 --pretty=%ci)
          
          # Create changelog content
          cat > ${{ env.CHANGELOG_PATH }} << EOF
          Version: ${{ github.run_number }}
          Build: ${{ github.run_id }}
          Commit: $COMMIT_HASH
          Date: $COMMIT_DATE
          
          Changes:
          $COMMIT_MSG
          EOF
          
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat ${{ env.CHANGELOG_PATH }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Changelog generated:"
          cat ${{ env.CHANGELOG_PATH }}

      - name: Upload Changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: ${{ env.CHANGELOG_PATH }}

  # Build Android
  build-android:
    needs: generate-changelog
    if: github.event.inputs.platform == 'both' || github.event.inputs.platform == 'android' || github.event.inputs.platform == ''
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build_number }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: build

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Generate Version
        id: version
        run: |
          # Generate version based on git info and current date
          GIT_HASH=$(git rev-parse --short HEAD)
          BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
          VERSION_NAME="1.0.$BUILD_NUMBER"
          
          echo "version=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "git_hash=$GIT_HASH" >> $GITHUB_OUTPUT
          
          # Update version in Unity project
          sed -i "s/bundleVersion: .*/bundleVersion: $VERSION_NAME/" ProjectSettings/ProjectSettings.asset
          sed -i "s/AndroidBundleVersionCode: .*/AndroidBundleVersionCode: $BUILD_NUMBER/" ProjectSettings/ProjectSettings.asset

      - name: Build Android
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          unityVersion: ${{ env.UNITY_VERSION }}
          androidKeystoreName: user.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          androidTargetSdkVersion: 34
          androidSdkVersion: 34
          androidBuildToolsVersion: "34.0.0"
          buildMethod: BuildScript.BuildAndroid
          buildName: EvergreenMatch3
          buildPath: ${{ env.ANDROID_BUILD_PATH }}

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ steps.version.outputs.build_number }}
          path: ${{ env.ANDROID_BUILD_PATH }}
          retention-days: 30

  # Build iOS
  build-ios:
    needs: generate-changelog
    if: github.event.inputs.platform == 'both' || github.event.inputs.platform == 'ios' || github.event.inputs.platform == ''
    runs-on: macos-latest
    outputs:
      build-version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build_number }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: build

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Generate Version
        id: version
        run: |
          # Generate version based on git info and current date
          GIT_HASH=$(git rev-parse --short HEAD)
          BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
          VERSION_NAME="1.0.$BUILD_NUMBER"
          
          echo "version=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "git_hash=$GIT_HASH" >> $GITHUB_OUTPUT
          
          # Update version in Unity project
          sed -i '' "s/bundleVersion: .*/bundleVersion: $VERSION_NAME/" ProjectSettings/ProjectSettings.asset
          sed -i '' "s/iOSBuildNumber: .*/iOSBuildNumber: $BUILD_NUMBER/" ProjectSettings/ProjectSettings.asset

      - name: Build iOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS
          unityVersion: ${{ env.UNITY_VERSION }}
          buildMethod: BuildScript.BuildiOS
          buildName: EvergreenMatch3
          buildPath: ${{ env.IOS_BUILD_PATH }}

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ steps.version.outputs.build_number }}
          path: ${{ env.IOS_BUILD_PATH }}
          retention-days: 30

  # Deploy Android to Google Play
  deploy-android:
    needs: [build-android, generate-changelog]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.platform == 'both' || github.event.inputs.platform == 'android' || github.event.inputs.platform == '')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-build-${{ needs.build-android.outputs.build-number }}
          path: ${{ env.ANDROID_BUILD_PATH }}

      - name: Download Changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: build

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0

      - name: Install Fastlane
        run: |
          gem install fastlane
          gem install bundler

      - name: Setup Fastlane
        run: |
          # Create fastlane directory if it doesn't exist
          mkdir -p fastlane
          
          # Create Appfile if it doesn't exist
          if [ ! -f "fastlane/Appfile" ]; then
            cat > fastlane/Appfile << EOF
          # This file contains the fastlane.tools configuration
          # You can find the documentation at https://docs.fastlane.tools
          
          # If you want to use a different app identifier, uncomment the following line
          # app_identifier("your.app.identifier")
          
          # If you want to use a different team, uncomment the following line
          # team_id("your.team.id")
          
          # For more information about the Appfile, see:
          #     https://docs.fastlane.tools/advanced/#appfile
          EOF
          fi

      - name: Deploy to Google Play
        env:
          GOOGLE_PLAY_JSON: ${{ secrets.GOOGLE_PLAY_JSON }}
        run: |
          # Create fastlane directory structure
          mkdir -p fastlane/metadata/android/en-US/changelogs
          
          # Copy changelog to fastlane metadata
          cp ${{ env.CHANGELOG_PATH }} fastlane/metadata/android/en-US/changelogs/${{ needs.build-android.outputs.build-number }}.txt
          
          # Deploy using fastlane
          cd fastlane
          fastlane android deploy \
            track:${{ github.event.inputs.track || 'internal' }} \
            json_key:"$GOOGLE_PLAY_JSON" \
            aab_path:"../${{ env.ANDROID_BUILD_PATH }}/*.aab" \
            skip_upload_metadata:false \
            skip_upload_images:false \
            skip_upload_screenshots:false

  # Deploy iOS to TestFlight
  deploy-ios:
    needs: [build-ios, generate-changelog]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.platform == 'both' || github.event.inputs.platform == 'ios' || github.event.inputs.platform == '')
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download iOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-build-${{ needs.build-ios.outputs.build-number }}
          path: ${{ env.IOS_BUILD_PATH }}

      - name: Download Changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: build

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0

      - name: Install Fastlane
        run: |
          gem install fastlane
          gem install bundler

      - name: Setup Fastlane
        run: |
          # Create fastlane directory if it doesn't exist
          mkdir -p fastlane
          
          # Create Appfile if it doesn't exist
          if [ ! -f "fastlane/Appfile" ]; then
            cat > fastlane/Appfile << EOF
          # This file contains the fastlane.tools configuration
          # You can find the documentation at https://docs.fastlane.tools
          
          # If you want to use a different app identifier, uncomment the following line
          # app_identifier("your.app.identifier")
          
          # If you want to use a different team, uncomment the following line
          # team_id("your.team.id")
          
          # For more information about the Appfile, see:
          #     https://docs.fastlane.tools/advanced/#appfile
          EOF
          fi

      - name: Deploy to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        run: |
          # Create fastlane directory structure
          mkdir -p fastlane/metadata/ios/en-US
          
          # Copy changelog to fastlane metadata
          cp ${{ env.CHANGELOG_PATH }} fastlane/metadata/ios/en-US/release_notes.txt
          
          # Deploy using fastlane
          cd fastlane
          fastlane ios deploy \
            api_key:"$APP_STORE_CONNECT_API_KEY" \
            ipa_path:"../${{ env.IOS_BUILD_PATH }}/*.ipa" \
            skip_metadata:false \
            skip_screenshots:false

  # Notify Deployment Status
  notify-deployment:
    if: always()
    needs: [build-android, build-ios, deploy-android, deploy-ios]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Success
        if: needs.build-android.result == 'success' && needs.build-ios.result == 'success'
        run: |
          echo "✅ Build and deployment successful!"
          echo "Android Version: ${{ needs.build-android.outputs.build-version }}"
          echo "iOS Version: ${{ needs.build-ios.outputs.build-version }}"

      - name: Notify Failure
        if: needs.build-android.result == 'failure' || needs.build-ios.result == 'failure'
        run: |
          echo "❌ Build or deployment failed!"
          echo "Android Status: ${{ needs.build-android.result }}"
          echo "iOS Status: ${{ needs.build-ios.result }}"

      - name: Send Slack Notification
        if: always() && env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#game-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}