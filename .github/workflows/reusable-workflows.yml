name: Reusable Workflows

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      action:
        description: 'Action to perform'
        required: true
        type: string
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '22'
      unity-version:
        description: 'Unity version to use'
        required: false
        type: string
        default: '2022.3.20f1'
    secrets:
      UNITY_PROJECT_ID:
        required: true
      UNITY_ENV_ID:
        required: true
      UNITY_CLIENT_ID:
        required: true
      UNITY_CLIENT_SECRET:
        required: true
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

env:
  NODE_VERSION: ${{ inputs.node-version }}
  UNITY_VERSION: ${{ inputs.unity-version }}
  UNITY_PROJECT_ID: ${{ secrets.UNITY_PROJECT_ID }}
  UNITY_ENV_ID: ${{ secrets.UNITY_ENV_ID }}
  UNITY_CLIENT_ID: ${{ secrets.UNITY_CLIENT_ID }}
  UNITY_CLIENT_SECRET: ${{ secrets.UNITY_CLIENT_SECRET }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}
      unity-version: ${{ steps.setup-unity.outputs.unity-version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Unity
      id: setup-unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    if: inputs.action == 'test' || inputs.action == 'all'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.setup.outputs.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test

    - name: Run integration tests
      run: npm run test:integration

    - name: Run E2E tests
      run: npm run test:e2e

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: setup
    if: inputs.action == 'build' || inputs.action == 'all'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.setup.outputs.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: inputs.action == 'security' || inputs.action == 'all'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.setup.outputs.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security scan
      run: npm run security

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.json
        retention-days: 30

  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: setup
    if: inputs.action == 'performance' || inputs.action == 'all'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.setup.outputs.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Run performance tests
      run: npm run performance

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-metrics.json
        retention-days: 30

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [setup, test, build, security, performance]
    if: inputs.action == 'deploy' || inputs.action == 'all'
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.setup.outputs.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build

    - name: Deploy to ${{ inputs.environment }}
      run: |
        echo "🚀 Deploying to ${{ inputs.environment }}..."
        npm run deploy:${{ inputs.environment }}

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        npm run health

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [setup, test, build, security, performance, deploy]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cleanup temporary files
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -rf node_modules
        rm -rf build
        rm -rf test-results

    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "" >> deployment-report.md
        echo "## Environment: ${{ inputs.environment }}" >> deployment-report.md
        echo "## Action: ${{ inputs.action }}" >> deployment-report.md
        echo "## Node.js Version: ${{ needs.setup.outputs.node-version }}" >> deployment-report.md
        echo "## Unity Version: ${{ needs.setup.outputs.unity-version }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Job Results" >> deployment-report.md
        echo "- Setup: ${{ needs.setup.result }}" >> deployment-report.md
        echo "- Test: ${{ needs.test.result }}" >> deployment-report.md
        echo "- Build: ${{ needs.build.result }}" >> deployment-report.md
        echo "- Security: ${{ needs.security.result }}" >> deployment-report.md
        echo "- Performance: ${{ needs.performance.result }}" >> deployment-report.md
        echo "- Deploy: ${{ needs.deploy.result }}" >> deployment-report.md

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.md
        retention-days: 30