name: Performance Testing

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - load
        - stress
        - volume
        - spike
        - endurance

env:
  NODE_VERSION: '22'
  PERFORMANCE_THRESHOLDS:
    RESPONSE_TIME: 2000  # 2 seconds
    THROUGHPUT: 1000     # requests per second
    ERROR_RATE: 1        # 1%
    MEMORY_USAGE: 80     # 80%
    CPU_USAGE: 70        # 70%

jobs:
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'load' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Install Artillery
      run: npm install -g artillery

    - name: Create load test configuration
      run: |
        cat > load-test.yml << EOF
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 60
              arrivalRate: 10
            - duration: 120
              arrivalRate: 50
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: "API Load Test"
            weight: 100
            flow:
              - get:
                  url: "/api/health"
              - get:
                  url: "/api/economy/currencies"
              - get:
                  url: "/api/economy/inventory"
              - get:
                  url: "/api/economy/catalog"
        EOF

    - name: Run load test
      run: |
        artillery run load-test.yml --output load-test-results.json
        artillery report load-test-results.json

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: load-test-results.json
        retention-days: 30

  stress-test:
    name: Stress Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'stress' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Create stress test script
      run: |
        cat > stress-test.js << EOF
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '2m', target: 100 },
            { duration: '5m', target: 100 },
            { duration: '2m', target: 200 },
            { duration: '5m', target: 200 },
            { duration: '2m', target: 300 },
            { duration: '5m', target: 300 },
            { duration: '2m', target: 400 },
            { duration: '5m', target: 400 },
            { duration: '10m', target: 0 },
          ],
        };

        export default function () {
          let response = http.get('http://localhost:3000/api/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2000ms': (r) => r.timings.duration < 2000,
          });
          sleep(1);
        }
        EOF

    - name: Run stress test
      run: k6 run stress-test.js --out json=stress-test-results.json

    - name: Upload stress test results
      uses: actions/upload-artifact@v4
      with:
        name: stress-test-results
        path: stress-test-results.json
        retention-days: 30

  volume-test:
    name: Volume Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'volume' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Install Apache Bench
      run: sudo apt-get install -y apache2-utils

    - name: Run volume test
      run: |
        ab -n 10000 -c 100 -g volume-test-results.tsv http://localhost:3000/api/health
        ab -n 10000 -c 100 -g volume-test-economy.tsv http://localhost:3000/api/economy/currencies

    - name: Upload volume test results
      uses: actions/upload-artifact@v4
      with:
        name: volume-test-results
        path: volume-test-results.tsv
        retention-days: 30

  spike-test:
    name: Spike Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'spike' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Install Artillery
      run: npm install -g artillery

    - name: Create spike test configuration
      run: |
        cat > spike-test.yml << EOF
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 10
              arrivalRate: 1
            - duration: 1
              arrivalRate: 1000
            - duration: 10
              arrivalRate: 1
        scenarios:
          - name: "Spike Test"
            weight: 100
            flow:
              - get:
                  url: "/api/health"
        EOF

    - name: Run spike test
      run: |
        artillery run spike-test.yml --output spike-test-results.json
        artillery report spike-test-results.json

    - name: Upload spike test results
      uses: actions/upload-artifact@v4
      with:
        name: spike-test-results
        path: spike-test-results.json
        retention-days: 30

  endurance-test:
    name: Endurance Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'endurance' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Install Artillery
      run: npm install -g artillery

    - name: Create endurance test configuration
      run: |
        cat > endurance-test.yml << EOF
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 1800
              arrivalRate: 10
        scenarios:
          - name: "Endurance Test"
            weight: 100
            flow:
              - get:
                  url: "/api/health"
              - sleep: 1
        EOF

    - name: Run endurance test
      run: |
        timeout 1800 artillery run endurance-test.yml --output endurance-test-results.json || true
        artillery report endurance-test-results.json

    - name: Upload endurance test results
      uses: actions/upload-artifact@v4
      with:
        name: endurance-test-results
        path: endurance-test-results.json
        retention-days: 30

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [load-test, stress-test, volume-test, spike-test, endurance-test]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results

    - name: Generate performance report
      run: |
        echo "# Performance Test Results" > performance-report.md
        echo "" >> performance-report.md
        echo "## Test Summary" >> performance-report.md
        echo "- Load Test: ${{ needs.load-test.result }}" >> performance-report.md
        echo "- Stress Test: ${{ needs.stress-test.result }}" >> performance-report.md
        echo "- Volume Test: ${{ needs.volume-test.result }}" >> performance-report.md
        echo "- Spike Test: ${{ needs.spike-test.result }}" >> performance-report.md
        echo "- Endurance Test: ${{ needs.endurance-test.result }}" >> performance-report.md
        echo "" >> performance-report.md
        echo "## Thresholds" >> performance-report.md
        echo "- Response Time: < ${{ env.PERFORMANCE_THRESHOLDS.RESPONSE_TIME }}ms" >> performance-report.md
        echo "- Throughput: > ${{ env.PERFORMANCE_THRESHOLDS.THROUGHPUT }} req/s" >> performance-report.md
        echo "- Error Rate: < ${{ env.PERFORMANCE_THRESHOLDS.ERROR_RATE }}%" >> performance-report.md
        echo "- Memory Usage: < ${{ env.PERFORMANCE_THRESHOLDS.MEMORY_USAGE }}%" >> performance-report.md
        echo "- CPU Usage: < ${{ env.PERFORMANCE_THRESHOLDS.CPU_USAGE }}%" >> performance-report.md

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });