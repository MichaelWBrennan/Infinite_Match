name: Artifact Management

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 7 * * 1'  # Weekly on Monday at 7 AM UTC
  workflow_dispatch:
    inputs:
      action:
        description: 'Artifact action to perform'
        required: true
        default: 'cleanup'
        type: choice
        options:
        - cleanup
        - backup
        - restore
        - list

env:
  ARTIFACT_RETENTION_DAYS: 30
  BACKUP_RETENTION_DAYS: 90
  MAX_ARTIFACTS_PER_TYPE: 10

jobs:
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'cleanup' || github.event.inputs.action == '' || github.event_name == 'schedule'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create artifact cleanup script
      run: |
        cat > cleanup-artifacts.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        class ArtifactManager {
          constructor() {
            this.artifactsDir = path.join(__dirname, 'artifacts');
            this.retentionDays = process.env.ARTIFACT_RETENTION_DAYS || 30;
            this.maxArtifacts = process.env.MAX_ARTIFACTS_PER_TYPE || 10;
          }

          async cleanupOldArtifacts() {
            console.log('🧹 Starting artifact cleanup...');
            
            if (!fs.existsSync(this.artifactsDir)) {
              console.log('📁 No artifacts directory found');
              return;
            }

            const artifacts = fs.readdirSync(this.artifactsDir);
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - this.retentionDays);

            let cleanedCount = 0;
            let totalSize = 0;

            for (const artifact of artifacts) {
              const artifactPath = path.join(this.artifactsDir, artifact);
              const stats = fs.statSync(artifactPath);
              
              if (stats.mtime < cutoffDate) {
                const size = this.getDirectorySize(artifactPath);
                totalSize += size;
                
                fs.rmSync(artifactPath, { recursive: true });
                console.log(`🗑️ Cleaned up: ${artifact} (${this.formatBytes(size)})`);
                cleanedCount++;
              }
            }

            console.log(`✅ Cleanup completed: ${cleanedCount} artifacts removed, ${this.formatBytes(totalSize)} freed`);
          }

          getDirectorySize(dirPath) {
            let size = 0;
            const files = fs.readdirSync(dirPath);
            
            for (const file of files) {
              const filePath = path.join(dirPath, file);
              const stats = fs.statSync(filePath);
              
              if (stats.isDirectory()) {
                size += this.getDirectorySize(filePath);
              } else {
                size += stats.size;
              }
            }
            
            return size;
          }

          formatBytes(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
          }
        }

        const manager = new ArtifactManager();
        manager.cleanupOldArtifacts().catch(console.error);
        EOF

    - name: Run artifact cleanup
      run: node cleanup-artifacts.js

  backup-artifacts:
    name: Backup Important Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'backup' || github.event_name == 'schedule'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create artifact backup script
      run: |
        cat > backup-artifacts.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const { execSync } = require('child_process');

        class ArtifactBackup {
          constructor() {
            this.backupDir = path.join(__dirname, 'backups', 'artifacts');
            this.artifactsDir = path.join(__dirname, 'artifacts');
            this.timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          }

          async backupArtifacts() {
            console.log('💾 Starting artifact backup...');
            
            if (!fs.existsSync(this.artifactsDir)) {
              console.log('📁 No artifacts directory found');
              return;
            }

            const backupPath = path.join(this.backupDir, this.timestamp);
            fs.mkdirSync(backupPath, { recursive: true });

            // Backup important artifacts
            const importantArtifacts = [
              'build-results',
              'test-results',
              'security-reports',
              'performance-reports',
              'deployment-logs'
            ];

            for (const artifact of importantArtifacts) {
              const sourcePath = path.join(this.artifactsDir, artifact);
              if (fs.existsSync(sourcePath)) {
                const destPath = path.join(backupPath, artifact);
                fs.cpSync(sourcePath, destPath, { recursive: true });
                console.log(`📦 Backed up: ${artifact}`);
              }
            }

            // Create backup manifest
            const manifest = {
              timestamp: this.timestamp,
              artifacts: importantArtifacts.filter(a => fs.existsSync(path.join(this.artifactsDir, a))),
              size: this.getDirectorySize(backupPath)
            };

            fs.writeFileSync(
              path.join(backupPath, 'manifest.json'),
              JSON.stringify(manifest, null, 2)
            );

            console.log(`✅ Backup completed: ${backupPath}`);
          }

          getDirectorySize(dirPath) {
            let size = 0;
            const files = fs.readdirSync(dirPath);
            
            for (const file of files) {
              const filePath = path.join(dirPath, file);
              const stats = fs.statSync(filePath);
              
              if (stats.isDirectory()) {
                size += this.getDirectorySize(filePath);
              } else {
                size += stats.size;
              }
            }
            
            return size;
          }
        }

        const backup = new ArtifactBackup();
        backup.backupArtifacts().catch(console.error);
        EOF

    - name: Run artifact backup
      run: node backup-artifacts.js

    - name: Upload backup
      uses: actions/upload-artifact@v4
      with:
        name: artifact-backup-${{ github.run_number }}
        path: backups/artifacts
        retention-days: 90

  list-artifacts:
    name: List Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'list'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create artifact list script
      run: |
        cat > list-artifacts.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        class ArtifactLister {
          constructor() {
            this.artifactsDir = path.join(__dirname, 'artifacts');
          }

          listArtifacts() {
            console.log('📋 Artifact Inventory');
            console.log('==================');
            
            if (!fs.existsSync(this.artifactsDir)) {
              console.log('📁 No artifacts directory found');
              return;
            }

            const artifacts = fs.readdirSync(this.artifactsDir);
            
            if (artifacts.length === 0) {
              console.log('📁 No artifacts found');
              return;
            }

            let totalSize = 0;
            const artifactList = [];

            for (const artifact of artifacts) {
              const artifactPath = path.join(this.artifactsDir, artifact);
              const stats = fs.statSync(artifactPath);
              const size = this.getDirectorySize(artifactPath);
              totalSize += size;

              artifactList.push({
                name: artifact,
                size: size,
                modified: stats.mtime,
                type: stats.isDirectory() ? 'directory' : 'file'
              });
            }

            // Sort by modification date (newest first)
            artifactList.sort((a, b) => b.modified - a.modified);

            console.log(`📊 Total artifacts: ${artifactList.length}`);
            console.log(`💾 Total size: ${this.formatBytes(totalSize)}`);
            console.log('');

            for (const artifact of artifactList) {
              console.log(`📦 ${artifact.name}`);
              console.log(`   Size: ${this.formatBytes(artifact.size)}`);
              console.log(`   Modified: ${artifact.modified.toISOString()}`);
              console.log(`   Type: ${artifact.type}`);
              console.log('');
            }
          }

          getDirectorySize(dirPath) {
            let size = 0;
            const files = fs.readdirSync(dirPath);
            
            for (const file of files) {
              const filePath = path.join(dirPath, file);
              const stats = fs.statSync(filePath);
              
              if (stats.isDirectory()) {
                size += this.getDirectorySize(filePath);
              } else {
                size += stats.size;
              }
            }
            
            return size;
          }

          formatBytes(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
          }
        }

        const lister = new ArtifactLister();
        lister.listArtifacts();
        EOF

    - name: Run artifact list
      run: node list-artifacts.js

  artifact-summary:
    name: Artifact Management Summary
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, backup-artifacts, list-artifacts]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate artifact management report
      run: |
        echo "# Artifact Management Report" > artifact-management-report.md
        echo "" >> artifact-management-report.md
        echo "## Summary" >> artifact-management-report.md
        echo "- Cleanup: ${{ needs.cleanup-artifacts.result }}" >> artifact-management-report.md
        echo "- Backup: ${{ needs.backup-artifacts.result }}" >> artifact-management-report.md
        echo "- List: ${{ needs.list-artifacts.result }}" >> artifact-management-report.md
        echo "" >> artifact-management-report.md
        echo "## Configuration" >> artifact-management-report.md
        echo "- Retention Days: ${{ env.ARTIFACT_RETENTION_DAYS }}" >> artifact-management-report.md
        echo "- Backup Retention Days: ${{ env.BACKUP_RETENTION_DAYS }}" >> artifact-management-report.md
        echo "- Max Artifacts Per Type: ${{ env.MAX_ARTIFACTS_PER_TYPE }}" >> artifact-management-report.md

    - name: Upload artifact management report
      uses: actions/upload-artifact@v4
      with:
        name: artifact-management-report
        path: artifact-management-report.md
        retention-days: 30