name: Unity Cloud Build Economy Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'unity/Assets/StreamingAssets/economy_items.csv'
      - 'unity/Assets/Scripts/Economy/**'
      - 'unity/Assets/CloudCode/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'unity/Assets/StreamingAssets/economy_items.csv'
      - 'unity/Assets/Scripts/Economy/**'
      - 'unity/Assets/CloudCode/**'

jobs:
  validate-economy-data:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: '2022.3.0f1'
        
    - name: Cache Unity Library
      uses: actions/cache@v4
      with:
        path: unity/Library
        key: Library-${{ hashFiles('unity/Assets/**', 'unity/Packages/**') }}
        restore-keys: |
          Library-
          
    - name: Validate Economy CSV
      run: |
        cd unity
        echo "Validating economy CSV data..."
        python3 -c "
        import csv
        import sys
        
        try:
            with open('Assets/StreamingAssets/economy_items.csv', 'r') as file:
                reader = csv.DictReader(file)
                items = list(reader)
                
            print(f'Found {len(items)} items in CSV')
            
            # Validate required columns
            required_columns = ['id', 'type', 'name', 'cost_gems', 'cost_coins', 'quantity', 'description']
            for item in items:
                for col in required_columns:
                    if not item.get(col):
                        print(f'ERROR: Missing {col} for item {item.get(\"id\", \"unknown\")}')
                        sys.exit(1)
                        
                # Validate numeric fields
                try:
                    int(item['cost_gems'])
                    int(item['cost_coins'])
                    int(item['quantity'])
                except ValueError:
                    print(f'ERROR: Invalid numeric value for item {item[\"id\"]}')
                    sys.exit(1)
                    
            print('CSV validation passed!')
            
        except Exception as e:
            print(f'ERROR: CSV validation failed: {e}')
            sys.exit(1)
        "
        
    - name: Check for duplicate IDs
      run: |
        cd unity
        python3 -c "
        import csv
        
        with open('Assets/StreamingAssets/economy_items.csv', 'r') as file:
            reader = csv.DictReader(file)
            items = list(reader)
            
        ids = [item['id'] for item in items]
        duplicates = [id for id in set(ids) if ids.count(id) > 1]
        
        if duplicates:
            print(f'ERROR: Duplicate IDs found: {duplicates}')
            exit(1)
        else:
            print('No duplicate IDs found')
        "

  build-unity:
    needs: validate-economy-data
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: '2022.3.0f1'
        
    - name: Cache Unity Library
      uses: actions/cache@v4
      with:
        path: unity/Library
        key: Library-${{ hashFiles('unity/Assets/**', 'unity/Packages/**') }}
        restore-keys: |
          Library-
          
    - name: Build Unity Project
      uses: game-ci/unity-builder@v2
      with:
        projectPath: unity
        buildName: EconomyBuild
        buildMethod: Evergreen.Editor.CloudBuildEconomyProcessor.ParseCSVAndGenerateAssets
        targetPlatform: StandaloneWindows64
        buildPath: build
        
    - name: Verify Economy Assets Generated
      run: |
        cd unity
        echo "Verifying generated economy assets..."
        
        # Check if ScriptableObjects were generated
        if [ ! -d "Assets/Resources/Economy" ]; then
          echo "ERROR: ScriptableObjects directory not found"
          exit 1
        fi
        
        # Count generated assets
        asset_count=$(find Assets/Resources/Economy -name "*.asset" | wc -l)
        echo "Generated $asset_count ScriptableObject assets"
        
        # Check if JSON was generated
        if [ ! -f "Assets/StreamingAssets/economy_data.json" ]; then
          echo "ERROR: Economy JSON data not found"
          exit 1
        fi
        
        # Check if Unity Economy config was generated
        if [ ! -f "Assets/StreamingAssets/unity_economy_config.json" ]; then
          echo "ERROR: Unity Economy configuration not found"
          exit 1
        fi
        
        echo "All economy assets generated successfully!"
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unity-build
        path: unity/build
        
    - name: Upload Economy Assets
      uses: actions/upload-artifact@v4
      with:
        name: economy-assets
        path: |
          unity/Assets/Resources/Economy/
          unity/Assets/StreamingAssets/economy_data.json
          unity/Assets/StreamingAssets/unity_economy_config.json

  deploy-economy-config:
    needs: build-unity
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Economy Assets
      uses: actions/download-artifact@v4
      with:
        name: economy-assets
        
    - name: Deploy to Unity Economy Dashboard
      run: |
        echo "Deploying economy configuration to Unity Economy Dashboard..."
        
        # This would integrate with Unity Economy API to deploy configurations
        # For now, we'll just log the action
        echo "Economy configuration deployment would happen here"
        echo "Configuration files:"
        ls -la Assets/StreamingAssets/
        
        # In a real implementation, you would:
        # 1. Authenticate with Unity Services
        # 2. Upload currency definitions
        # 3. Upload inventory item definitions
        # 4. Upload virtual purchase definitions
        # 5. Upload real money purchase definitions
        
    - name: Notify Deployment
      run: |
        echo "Economy configuration deployed successfully!"
        echo "Build artifacts available for download"
    
    - name: Run Auto Maintenance
      run: |
        echo "Running automated maintenance..."
        cd scripts
        python3 auto_maintenance.py