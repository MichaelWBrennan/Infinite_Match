name: Unity Headless Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - linux
          - webgl
          - android
          - ios
      run_tests:
        description: 'Run tests'
        required: true
        default: true
        type: boolean
      build_type:
        description: 'Build type'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - release

env:
  UNITY_VERSION: 2022.3.20f1
  BUILD_PATH: build
  TEST_RESULTS_PATH: test-results

jobs:
  # Test job - runs first
  test:
    name: Run Unity Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_tests != false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Run Unity Tests
        uses: game-ci/unity-test-runner@v3
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity
          testMode: all
          artifactsPath: ${{ env.TEST_RESULTS_PATH }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ${{ env.TEST_RESULTS_PATH }}
          retention-days: 30

  # Windows Build
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows' || github.event.inputs.platform == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Build Windows
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          projectPath: unity
          buildName: EvergreenPuzzler
          buildPath: ${{ env.BUILD_PATH }}/Windows
          buildMethod: BuildScript.BuildWindows
          versioning: Custom
          version: ${{ github.run_number }}
          customParameters: -batchmode -quit -logFile - -executeMethod BuildScript.BuildWindows

      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{ env.BUILD_PATH }}/Windows
          retention-days: 30

  # Linux Build
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'linux' || github.event.inputs.platform == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Build Linux
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneLinux64
          projectPath: unity
          buildName: EvergreenPuzzler
          buildPath: ${{ env.BUILD_PATH }}/Linux
          buildMethod: BuildScript.BuildLinux
          versioning: Custom
          version: ${{ github.run_number }}
          customParameters: -batchmode -quit -logFile - -executeMethod BuildScript.BuildLinux

      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: ${{ env.BUILD_PATH }}/Linux
          retention-days: 30

  # WebGL Build
  build-webgl:
    name: Build WebGL
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'webgl' || github.event.inputs.platform == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Build WebGL
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          projectPath: unity
          buildName: EvergreenPuzzler
          buildPath: ${{ env.BUILD_PATH }}/WebGL
          buildMethod: BuildScript.BuildWebGL
          versioning: Custom
          version: ${{ github.run_number }}
          customParameters: -batchmode -quit -logFile - -executeMethod BuildScript.BuildWebGL

      - name: Upload WebGL Build
        uses: actions/upload-artifact@v4
        with:
          name: webgl-build
          path: ${{ env.BUILD_PATH }}/WebGL
          retention-days: 30

  # Android Build
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'android' || github.event.inputs.platform == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Build Android
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          projectPath: unity
          buildName: EvergreenPuzzler
          buildPath: ${{ env.BUILD_PATH }}/Android
          buildMethod: BuildScript.BuildAndroid
          versioning: Custom
          version: ${{ github.run_number }}
          androidKeystoreName: user.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          customParameters: -batchmode -quit -logFile - -executeMethod BuildScript.BuildAndroid

      - name: Upload Android Build
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: ${{ env.BUILD_PATH }}/Android
          retention-days: 30

  # iOS Build
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'ios' || github.event.inputs.platform == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Unity packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/unity
            Library
            Temp
          key: ${{ runner.os }}-unity-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Setup Unity
        uses: game-ci/unity-setup@v2
        with:
          unity-version: ${{ env.UNITY_VERSION }}

      - name: Build iOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS
          projectPath: unity
          buildName: EvergreenPuzzler
          buildPath: ${{ env.BUILD_PATH }}/iOS
          buildMethod: BuildScript.BuildiOS
          versioning: Custom
          version: ${{ github.run_number }}
          customParameters: -batchmode -quit -logFile - -executeMethod BuildScript.BuildiOS

      - name: Upload iOS Build
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: ${{ env.BUILD_PATH }}/iOS
          retention-days: 30

  # Deployment (commented out - uncomment and configure as needed)
  # deploy:
  #   name: Deploy Builds
  #   runs-on: ubuntu-latest
  #   needs: [build-windows, build-linux, build-webgl, build-android, build-ios]
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Download All Builds
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: builds
  #     
  #     # Itch.io deployment
  #     - name: Deploy to Itch.io
  #       uses: game-ci/itch-deploy@v2
  #       with:
  #         username: ${{ secrets.ITCH_USERNAME }}
  #         game: ${{ secrets.ITCH_GAME }}
  #         channel: ${{ github.ref_name }}
  #         directory: builds
  #         butler: ${{ secrets.BUTLER_API_KEY }}
  #     
  #     # Steam deployment
  #     - name: Deploy to Steam
  #       uses: game-ci/steam-deploy@v1
  #       with:
  #         username: ${{ secrets.STEAM_USERNAME }}
  #         password: ${{ secrets.STEAM_PASSWORD }}
  #         ssfn: ${{ secrets.STEAM_SSFN }}
  #         ssfn_secret: ${{ secrets.STEAM_SSFN_SECRET }}
  #         appid: ${{ secrets.STEAM_APPID }}
  #         depot: ${{ secrets.STEAM_DEPOT }}
  #         build_description: "Automated build from GitHub Actions"
  #         directory: builds
  #     
  #     # Google Play deployment
  #     - name: Deploy to Google Play
  #       uses: r0adkll/upload-google-play@v1
  #       with:
  #         serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
  #         packageName: com.evergreen.match3
  #         releaseFiles: builds/android-build/*.aab
  #         track: production
  #         status: completed
  #     
  #     # iOS App Store deployment
  #     - name: Deploy to App Store
  #       run: |
  #         echo "iOS deployment would go here using Fastlane"
  #         # xcrun altool --upload-app --type ios --file builds/ios-build/*.ipa
  #     
  #     # Netlify deployment for WebGL
  #     - name: Deploy WebGL to Netlify
  #       uses: nwtgck/actions-netlify@v2.0
  #       with:
  #         publish-dir: builds/webgl-build
  #         production-branch: main
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         deploy-message: "Deploy from GitHub Actions"
  #       env:
  #         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #         NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, build-windows, build-linux, build-webgl, build-android, build-ios]
    if: always()
    steps:
      - name: Generate Build Summary
        run: |
          echo "## 🎮 Unity Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows:** ${{ needs.build-windows.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux:** ${{ needs.build-linux.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **WebGL:** ${{ needs.build-webgl.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android:** ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS:** ${{ needs.build-ios.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Downloads" >> $GITHUB_STEP_SUMMARY
          echo "Check the **Artifacts** section below to download builds for each platform." >> $GITHUB_STEP_SUMMARY