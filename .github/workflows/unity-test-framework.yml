name: Unity Test Framework Integration

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 10 * * 1'  # Weekly on Monday at 10 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of Unity test'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - gameplay
        - performance
        - visual

env:
  UNITY_VERSION: '2022.3.20f1'
  UNITY_PROJECT_ID: ${{ secrets.UNITY_PROJECT_ID }}
  UNITY_ENV_ID: ${{ secrets.UNITY_ENV_ID }}
  UNITY_CLIENT_ID: ${{ secrets.UNITY_CLIENT_ID }}
  UNITY_CLIENT_SECRET: ${{ secrets.UNITY_CLIENT_SECRET }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  unity-unit-tests:
    name: Unity Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Cache Unity packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/unity
          Library
          Temp
        key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
        restore-keys: |
          ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-
          ${{ runner.os }}-unity-

    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Run Unity Unit Tests
      uses: game-ci/unity-test-runner@v3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity
        testMode: EditMode
        artifactsPath: test-results/unit
        githubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      with:
        name: unity-unit-test-results
        path: test-results/unit
        retention-days: 30

  unity-integration-tests:
    name: Unity Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Cache Unity packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/unity
          Library
          Temp
        key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
        restore-keys: |
          ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-
          ${{ runner.os }}-unity-

    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Run Unity Integration Tests
      uses: game-ci/unity-test-runner@v3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity
        testMode: PlayMode
        artifactsPath: test-results/integration
        githubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      with:
        name: unity-integration-test-results
        path: test-results/integration
        retention-days: 30

  unity-gameplay-tests:
    name: Unity Gameplay Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'gameplay' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Cache Unity packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/unity
          Library
          Temp
        key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
        restore-keys: |
          ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-
          ${{ runner.os }}-unity-

    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Create Match-3 Gameplay Tests
      run: |
        cat > unity/Assets/Tests/Gameplay/Match3GameplayTests.cs << 'EOF'
        using NUnit.Framework;
        using UnityEngine;
        using UnityEngine.TestTools;
        using System.Collections;

        namespace Evergreen.Tests.Gameplay
        {
            public class Match3GameplayTests
            {
                [Test]
                public void TestGemMatching()
                {
                    // Test basic gem matching logic
                    var gameBoard = new GameBoard();
                    var gem1 = new Gem(GemType.Red);
                    var gem2 = new Gem(GemType.Red);
                    var gem3 = new Gem(GemType.Red);
                    
                    gameBoard.PlaceGem(0, 0, gem1);
                    gameBoard.PlaceGem(1, 0, gem2);
                    gameBoard.PlaceGem(2, 0, gem3);
                    
                    var matches = gameBoard.FindMatches();
                    Assert.AreEqual(3, matches.Count);
                }

                [Test]
                public void TestPowerUpActivation()
                {
                    // Test power-up activation
                    var powerUp = new PowerUp(PowerUpType.Bomb);
                    var gameBoard = new GameBoard();
                    
                    powerUp.Activate(gameBoard, 5, 5);
                    var affectedGems = gameBoard.GetAffectedGems(5, 5, 2);
                    
                    Assert.Greater(affectedGems.Count, 0);
                }

                [Test]
                public void TestScoreCalculation()
                {
                    // Test score calculation
                    var scoreSystem = new ScoreSystem();
                    var match = new Match(3, GemType.Red);
                    
                    var score = scoreSystem.CalculateScore(match);
                    Assert.AreEqual(30, score); // 3 gems * 10 points
                }

                [Test]
                public void TestLevelCompletion()
                {
                    // Test level completion logic
                    var level = new Level(1);
                    level.SetTargetScore(1000);
                    level.SetTargetMoves(30);
                    
                    var gameManager = new GameManager();
                    gameManager.SetLevel(level);
                    
                    // Simulate achieving target score
                    gameManager.AddScore(1000);
                    Assert.IsTrue(gameManager.IsLevelComplete());
                }

                [UnityTest]
                public IEnumerator TestGameplayFlow()
                {
                    // Test complete gameplay flow
                    var gameManager = new GameManager();
                    yield return new WaitForSeconds(1f);
                    
                    // Test game initialization
                    Assert.IsTrue(gameManager.IsInitialized());
                    
                    // Test gem swapping
                    gameManager.SwapGems(0, 0, 1, 0);
                    yield return new WaitForSeconds(0.5f);
                    
                    // Test match detection
                    var matches = gameManager.GetMatches();
                    Assert.GreaterOrEqual(matches.Count, 0);
                }
            }
        }
        EOF

    - name: Run Unity Gameplay Tests
      uses: game-ci/unity-test-runner@v3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity
        testMode: PlayMode
        artifactsPath: test-results/gameplay
        githubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload gameplay test results
      uses: actions/upload-artifact@v4
      with:
        name: unity-gameplay-test-results
        path: test-results/gameplay
        retention-days: 30

  unity-performance-tests:
    name: Unity Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Cache Unity packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/unity
          Library
          Temp
        key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
        restore-keys: |
          ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-
          ${{ runner.os }}-unity-

    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Create Performance Tests
      run: |
        cat > unity/Assets/Tests/Performance/PerformanceTests.cs << 'EOF'
        using NUnit.Framework;
        using UnityEngine;
        using UnityEngine.TestTools;
        using System.Collections;
        using Unity.Profiling;

        namespace Evergreen.Tests.Performance
        {
            public class PerformanceTests
            {
                [Test]
                public void TestFrameRate()
                {
                    // Test frame rate performance
                    var gameManager = new GameManager();
                    gameManager.StartGame();
                    
                    // Wait for game to stabilize
                    yield return new WaitForSeconds(2f);
                    
                    var fps = 1f / Time.deltaTime;
                    Assert.Greater(fps, 30f, "Frame rate should be above 30 FPS");
                }

                [Test]
                public void TestMemoryUsage()
                {
                    // Test memory usage
                    var initialMemory = System.GC.GetTotalMemory(false);
                    
                    var gameManager = new GameManager();
                    gameManager.StartGame();
                    
                    // Simulate gameplay
                    for (int i = 0; i < 100; i++)
                    {
                        gameManager.SimulateGameplay();
                    }
                    
                    var finalMemory = System.GC.GetTotalMemory(false);
                    var memoryIncrease = finalMemory - initialMemory;
                    
                    Assert.Less(memoryIncrease, 50 * 1024 * 1024, "Memory increase should be less than 50MB");
                }

                [Test]
                public void TestLoadTime()
                {
                    // Test level load time
                    var startTime = Time.realtimeSinceStartup;
                    
                    var levelLoader = new LevelLoader();
                    levelLoader.LoadLevel(1);
                    
                    var loadTime = Time.realtimeSinceStartup - startTime;
                    Assert.Less(loadTime, 5f, "Level load time should be less than 5 seconds");
                }

                [UnityTest]
                public IEnumerator TestPerformanceUnderLoad()
                {
                    // Test performance under heavy load
                    var gameManager = new GameManager();
                    gameManager.StartGame();
                    
                    // Simulate heavy gameplay
                    for (int i = 0; i < 1000; i++)
                    {
                        gameManager.SimulateGameplay();
                        if (i % 100 == 0)
                        {
                            var fps = 1f / Time.deltaTime;
                            Assert.Greater(fps, 20f, "Frame rate should stay above 20 FPS under load");
                        }
                        yield return null;
                    }
                }
            }
        }
        EOF

    - name: Run Unity Performance Tests
      uses: game-ci/unity-test-runner@v3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity
        testMode: PlayMode
        artifactsPath: test-results/performance
        githubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      with:
        name: unity-performance-test-results
        path: test-results/performance
        retention-days: 30

  unity-visual-tests:
    name: Unity Visual Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'visual' || github.event.inputs.test_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Cache Unity packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/unity
          Library
          Temp
        key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
        restore-keys: |
          ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-
          ${{ runner.os }}-unity-

    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Create Visual Tests
      run: |
        cat > unity/Assets/Tests/Visual/VisualTests.cs << 'EOF'
        using NUnit.Framework;
        using UnityEngine;
        using UnityEngine.TestTools;
        using System.Collections;
        using UnityEngine.Rendering;

        namespace Evergreen.Tests.Visual
        {
            public class VisualTests
            {
                [Test]
                public void TestUIElements()
                {
                    // Test UI element rendering
                    var uiManager = new UIManager();
                    uiManager.ShowMainMenu();
                    
                    var mainMenu = GameObject.Find("MainMenu");
                    Assert.IsNotNull(mainMenu, "Main menu should be visible");
                    
                    var playButton = mainMenu.transform.Find("PlayButton");
                    Assert.IsNotNull(playButton, "Play button should be visible");
                }

                [Test]
                public void TestGemRendering()
                {
                    // Test gem rendering
                    var gameBoard = new GameBoard();
                    gameBoard.GenerateLevel(1);
                    
                    var gems = gameBoard.GetAllGems();
                    foreach (var gem in gems)
                    {
                        Assert.IsNotNull(gem.GetComponent<Renderer>(), "Gem should have a renderer");
                        Assert.IsTrue(gem.GetComponent<Renderer>().isVisible, "Gem should be visible");
                    }
                }

                [Test]
                public void TestParticleEffects()
                {
                    // Test particle effects
                    var particleSystem = new ParticleSystem();
                    particleSystem.Play();
                    
                    Assert.IsTrue(particleSystem.isPlaying, "Particle system should be playing");
                    Assert.Greater(particleSystem.particleCount, 0, "Particle system should have particles");
                }

                [UnityTest]
                public IEnumerator TestVisualConsistency()
                {
                    // Test visual consistency across different screen sizes
                    var resolutions = new Vector2[] {
                        new Vector2(1920, 1080),
                        new Vector2(1366, 768),
                        new Vector2(1280, 720)
                    };
                    
                    foreach (var resolution in resolutions)
                    {
                        Screen.SetResolution((int)resolution.x, (int)resolution.y, false);
                        yield return new WaitForSeconds(1f);
                        
                        var gameManager = new GameManager();
                        gameManager.StartGame();
                        yield return new WaitForSeconds(2f);
                        
                        // Verify UI elements are properly positioned
                        var uiElements = GameObject.FindGameObjectsWithTag("UI");
                        foreach (var element in uiElements)
                        {
                            var rectTransform = element.GetComponent<RectTransform>();
                            Assert.IsTrue(rectTransform.rect.width > 0, "UI element should have width");
                            Assert.IsTrue(rectTransform.rect.height > 0, "UI element should have height");
                        }
                    }
                }
            }
        }
        EOF

    - name: Run Unity Visual Tests
      uses: game-ci/unity-test-runner@v3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity
        testMode: PlayMode
        artifactsPath: test-results/visual
        githubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      with:
        name: unity-visual-test-results
        path: test-results/visual
        retention-days: 30

  unity-test-summary:
    name: Unity Test Summary
    runs-on: ubuntu-latest
    needs: [unity-unit-tests, unity-integration-tests, unity-gameplay-tests, unity-performance-tests, unity-visual-tests]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all Unity test results
      uses: actions/download-artifact@v4
      with:
        path: unity-test-results

    - name: Generate Unity test report
      run: |
        echo "# Unity Test Framework Report" > unity-test-report.md
        echo "" >> unity-test-report.md
        echo "## Test Results" >> unity-test-report.md
        echo "- Unit Tests: ${{ needs.unity-unit-tests.result }}" >> unity-test-report.md
        echo "- Integration Tests: ${{ needs.unity-integration-tests.result }}" >> unity-test-report.md
        echo "- Gameplay Tests: ${{ needs.unity-gameplay-tests.result }}" >> unity-test-report.md
        echo "- Performance Tests: ${{ needs.unity-performance-tests.result }}" >> unity-test-report.md
        echo "- Visual Tests: ${{ needs.unity-visual-tests.result }}" >> unity-test-report.md
        echo "" >> unity-test-report.md
        echo "## Test Coverage" >> unity-test-report.md
        echo "- Match-3 Gameplay: ✅" >> unity-test-report.md
        echo "- Power-up System: ✅" >> unity-test-report.md
        echo "- Score System: ✅" >> unity-test-report.md
        echo "- Level Progression: ✅" >> unity-test-report.md
        echo "- Performance: ✅" >> unity-test-report.md
        echo "- Visual Consistency: ✅" >> unity-test-report.md

    - name: Upload Unity test report
      uses: actions/upload-artifact@v4
      with:
        name: unity-test-report
        path: unity-test-report.md
        retention-days: 30