name: Self-Hosted Runners

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Monday at 8 AM UTC
  workflow_dispatch:
    inputs:
      runner-type:
        description: 'Type of self-hosted runner'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unity-build
        - performance-test
        - security-scan
        - deployment

env:
  NODE_VERSION: '22'
  UNITY_VERSION: '2022.3.20f1'
  UNITY_PROJECT_ID: ${{ secrets.UNITY_PROJECT_ID }}
  UNITY_ENV_ID: ${{ secrets.UNITY_ENV_ID }}
  UNITY_CLIENT_ID: ${{ secrets.UNITY_CLIENT_ID }}
  UNITY_CLIENT_SECRET: ${{ secrets.UNITY_CLIENT_SECRET }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  unity-build-runner:
    name: Unity Build - Self-Hosted
    runs-on: [self-hosted, unity-build]
    if: github.event.inputs.runner_type == 'all' || github.event.inputs.runner_type == 'unity-build' || github.event.inputs.runner_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt

    - name: Cache Unity packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/unity
          Library
          Temp
        key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
        restore-keys: |
          ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-
          ${{ runner.os }}-unity-

    - name: Run Unity Tests
      uses: game-ci/unity-test-runner@v3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity
        testMode: all
        artifactsPath: test-results
        githubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Unity Project
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        targetPlatform: StandaloneWindows64
        projectPath: unity
        buildName: EvergreenMatch3
        buildPath: build/Windows
        buildMethod: BuildScript.BuildWindows
        versioning: Custom
        version: ${{ github.run_number }}

    - name: Upload Unity build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unity-build-self-hosted
        path: build/Windows
        retention-days: 30

  performance-test-runner:
    name: Performance Test - Self-Hosted
    runs-on: [self-hosted, performance-test]
    if: github.event.inputs.runner_type == 'all' || github.event.inputs.runner_type == 'performance-test' || github.event.inputs.runner_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Install performance testing tools
      run: |
        npm install -g artillery
        npm install -g k6

    - name: Run load tests
      run: |
        echo "🚀 Running load tests on self-hosted runner..."
        npm run performance

    - name: Run stress tests
      run: |
        echo "⚡ Running stress tests on self-hosted runner..."
        artillery run load-test.yml --output stress-test-results.json

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-self-hosted
        path: performance-metrics.json
        retention-days: 30

  security-scan-runner:
    name: Security Scan - Self-Hosted
    runs-on: [self-hosted, security-scan]
    if: github.event.inputs.runner_type == 'all' || github.event.inputs.runner_type == 'security-scan' || github.event.inputs.runner_type == ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install security tools
      run: |
        npm install -g npm-audit
        npm install -g license-checker
        pip install safety

    - name: Run security scan
      run: |
        echo "🔒 Running security scan on self-hosted runner..."
        npm run security

    - name: Run dependency audit
      run: |
        echo "📦 Running dependency audit..."
        npm audit --audit-level=moderate
        npm audit --json > dependency-audit.json

    - name: Run license check
      run: |
        echo "📄 Running license check..."
        license-checker --json > license-report.json

    - name: Run Python security check
      run: |
        echo "🐍 Running Python security check..."
        safety check --json > python-security-report.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-self-hosted
        path: |
          security-report.json
          dependency-audit.json
          license-report.json
          python-security-report.json
        retention-days: 30

  deployment-runner:
    name: Deployment - Self-Hosted
    runs-on: [self-hosted, deployment]
    if: github.event.inputs.runner_type == 'all' || github.event.inputs.runner_type == 'deployment' || github.event.inputs.runner_type == ''
    environment: production
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup deployment environment
      run: |
        echo "🚀 Setting up deployment environment on self-hosted runner..."
        # Configure deployment environment
        export DEPLOYMENT_ENV=production
        export DEPLOYMENT_REGION=us-east-1
        export DEPLOYMENT_CLUSTER=production-cluster

    - name: Run pre-deployment checks
      run: |
        echo "🔍 Running pre-deployment checks..."
        npm run health
        npm run security
        npm run performance

    - name: Deploy application
      run: |
        echo "🚀 Deploying application on self-hosted runner..."
        npm run deploy:production

    - name: Verify deployment
      run: |
        echo "✅ Verifying deployment..."
        npm run health
        curl -f http://localhost:3000/api/health || exit 1

    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment tests..."
        npm run test:e2e

    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      with:
        name: deployment-logs-self-hosted
        path: deployment-logs
        retention-days: 30

  self-hosted-summary:
    name: Self-Hosted Runner Summary
    runs-on: ubuntu-latest
    needs: [unity-build-runner, performance-test-runner, security-scan-runner, deployment-runner]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate self-hosted runner report
      run: |
        echo "# Self-Hosted Runner Report" > self-hosted-report.md
        echo "" >> self-hosted-report.md
        echo "## Runner Status" >> self-hosted-report.md
        echo "- Unity Build Runner: ${{ needs.unity-build-runner.result }}" >> self-hosted-report.md
        echo "- Performance Test Runner: ${{ needs.performance-test-runner.result }}" >> self-hosted-report.md
        echo "- Security Scan Runner: ${{ needs.security-scan-runner.result }}" >> self-hosted-report.md
        echo "- Deployment Runner: ${{ needs.deployment-runner.result }}" >> self-hosted-report.md
        echo "" >> self-hosted-report.md
        echo "## Runner Benefits" >> self-hosted-report.md
        echo "- Faster builds with dedicated hardware" >> self-hosted-report.md
        echo "- Custom software and tools pre-installed" >> self-hosted-report.md
        echo "- Better resource utilization" >> self-hosted-report.md
        echo "- Reduced build times" >> self-hosted-report.md
        echo "- Custom environment configuration" >> self-hosted-report.md

    - name: Upload self-hosted runner report
      uses: actions/upload-artifact@v4
      with:
        name: self-hosted-runner-report
        path: self-hosted-report.md
        retention-days: 30