name: Unity Economy Service Sync

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'unity/Assets/StreamingAssets/economy_items.csv'
      - 'unity/Assets/Scripts/Economy/**'
      - 'unity/Assets/CloudCode/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'unity/Assets/StreamingAssets/economy_items.csv'
      - 'unity/Assets/Scripts/Economy/**'
      - 'unity/Assets/CloudCode/**'
  workflow_dispatch:
    inputs:
      sync_type:
        description: 'Type of sync to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - currencies
          - inventory
          - purchases

env:
  UNITY_VERSION: '2022.3.20f1'
  PROJECT_PATH: 'unity'

jobs:
  # Job 1: Validate CSV Data
  validate-csv:
    runs-on: ubuntu-latest
    outputs:
      items-count: ${{ steps.count.outputs.count }}
      currencies-count: ${{ steps.count.outputs.currencies }}
      inventory-count: ${{ steps.count.outputs.inventory }}
      purchases-count: ${{ steps.count.outputs.purchases }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate CSV Data
      run: |
        cd ${{ env.PROJECT_PATH }}
        echo "Validating economy CSV data..."
        
        python3 << 'EOF'
        import csv
        import sys
        
        try:
            with open('Assets/StreamingAssets/economy_items.csv', 'r') as file:
                reader = csv.DictReader(file)
                items = list(reader)
                
            print(f'Found {len(items)} items in CSV')
            
            # Validate required columns
            required_columns = ['id', 'type', 'name', 'cost_gems', 'cost_coins', 'quantity', 'description']
            for item in items:
                for col in required_columns:
                    if not item.get(col):
                        print(f'ERROR: Missing {col} for item {item.get("id", "unknown")}')
                        sys.exit(1)
                        
                # Validate numeric fields
                try:
                    int(item['cost_gems'])
                    int(item['cost_coins'])
                    int(item['quantity'])
                except ValueError:
                    print(f'ERROR: Invalid numeric value for item {item["id"]}')
                    sys.exit(1)
                    
            print('CSV validation passed!')
            
        except Exception as e:
            print(f'ERROR: CSV validation failed: {e}')
            sys.exit(1)
        EOF
    
    - name: Count Items
      id: count
      run: |
        cd ${{ env.PROJECT_PATH }}
        python3 << 'EOF'
        import csv
        
        with open('Assets/StreamingAssets/economy_items.csv', 'r') as file:
            reader = csv.DictReader(file)
            items = list(reader)
        
        currencies = len([item for item in items if item['type'] == 'currency'])
        inventory = len([item for item in items if item['type'] in ['booster', 'pack']])
        purchases = len([item for item in items if item['is_purchasable'] == 'true'])
        
        print(f"count={len(items)}")
        print(f"currencies={currencies}")
        print(f"inventory={inventory}")
        print(f"purchases={purchases}")
        EOF

  # Job 2: Generate Unity Services Configuration
  generate-config:
    runs-on: ubuntu-latest
    needs: validate-csv
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate Unity Services Configuration
      run: |
        cd scripts
        python3 setup_unity_economy.py
    
    - name: Upload Configuration
      uses: actions/upload-artifact@v4
      with:
        name: unity-services-config
        path: |
          unity/Assets/StreamingAssets/unity_services_config.json
          UNITY_ECONOMY_SETUP_INSTRUCTIONS.md

  # Job 3: Sync with Unity Dashboard
  sync-unity-dashboard:
    runs-on: ubuntu-latest
    needs: [validate-csv, generate-config]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Configuration
      uses: actions/download-artifact@v4
      with:
        name: unity-services-config
    
    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ env.UNITY_VERSION }}
    
    - name: Cache Unity Library
      uses: actions/cache@v4
      with:
        path: unity/Library
        key: Library-${{ hashFiles('unity/Assets/**', 'unity/Packages/**') }}
        restore-keys: |
          Library-
    
    - name: Sync Currencies to Unity Dashboard
      if: github.event.inputs.sync_type == 'currencies' || github.event.inputs.sync_type == 'full' || github.event.inputs.sync_type == ''
      run: |
        cd ${{ env.PROJECT_PATH }}
        echo "Syncing currencies to Unity Dashboard..."
        
        # This would use Unity Services API to create currencies
        # For now, we'll generate the configuration
        python3 << 'EOF'
        import json
        
        currencies = [
            {"id": "coins", "name": "Coins", "type": "soft_currency", "initial": 1000, "maximum": 999999},
            {"id": "gems", "name": "Gems", "type": "hard_currency", "initial": 50, "maximum": 99999},
            {"id": "energy", "name": "Energy", "type": "consumable", "initial": 5, "maximum": 30}
        ]
        
        with open('Assets/StreamingAssets/currencies_config.json', 'w') as f:
            json.dump(currencies, f, indent=2)
        
        print(f"Generated configuration for {len(currencies)} currencies")
        EOF
    
    - name: Sync Inventory Items to Unity Dashboard
      if: github.event.inputs.sync_type == 'inventory' || github.event.inputs.sync_type == 'full' || github.event.inputs.sync_type == ''
      run: |
        cd ${{ env.PROJECT_PATH }}
        echo "Syncing inventory items to Unity Dashboard..."
        
        python3 << 'EOF'
        import csv
        import json
        
        with open('Assets/StreamingAssets/economy_items.csv', 'r') as file:
            reader = csv.DictReader(file)
            items = list(reader)
        
        inventory_items = []
        for item in items:
            if item['type'] in ['booster', 'pack']:
                inventory_items.append({
                    "id": item['id'],
                    "name": item['name'],
                    "type": item['type'],
                    "tradable": item['is_tradeable'] == 'true',
                    "stackable": item['is_consumable'] == 'true'
                })
        
        with open('Assets/StreamingAssets/inventory_config.json', 'w') as f:
            json.dump(inventory_items, f, indent=2)
        
        print(f"Generated configuration for {len(inventory_items)} inventory items")
        EOF
    
    - name: Sync Virtual Purchases to Unity Dashboard
      if: github.event.inputs.sync_type == 'purchases' || github.event.inputs.sync_type == 'full' || github.event.inputs.sync_type == ''
      run: |
        cd ${{ env.PROJECT_PATH }}
        echo "Syncing virtual purchases to Unity Dashboard..."
        
        python3 << 'EOF'
        import csv
        import json
        
        with open('Assets/StreamingAssets/economy_items.csv', 'r') as file:
            reader = csv.DictReader(file)
            items = list(reader)
        
        virtual_purchases = []
        for item in items:
            if item['is_purchasable'] == 'true':
                cost_gems = int(item['cost_gems'])
                cost_coins = int(item['cost_coins'])
                
                virtual_purchases.append({
                    "id": item['id'],
                    "name": item['name'],
                    "cost": {
                        "currency": "gems" if cost_gems > 0 else "coins",
                        "amount": cost_gems if cost_gems > 0 else cost_coins
                    },
                    "rewards": [
                        {
                            "currency": "coins" if item['type'] == 'currency' else "gems",
                            "amount": int(item['quantity'])
                        }
                    ]
                })
        
        with open('Assets/StreamingAssets/purchases_config.json', 'w') as f:
            json.dump(virtual_purchases, f, indent=2)
        
        print(f"Generated configuration for {len(virtual_purchases)} virtual purchases")
        EOF
    
    - name: Upload Sync Results
      uses: actions/upload-artifact@v4
      with:
        name: unity-dashboard-sync-results
        path: |
          unity/Assets/StreamingAssets/currencies_config.json
          unity/Assets/StreamingAssets/inventory_config.json
          unity/Assets/StreamingAssets/purchases_config.json

  # Job 4: Deploy Cloud Code Functions
  deploy-cloudcode:
    runs-on: ubuntu-latest
    needs: [validate-csv, generate-config]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy Cloud Code Functions
      run: |
        echo "Deploying Cloud Code functions..."
        
        # List Cloud Code functions
        echo "Cloud Code functions to deploy:"
        echo "- AddCurrency.js"
        echo "- SpendCurrency.js"
        echo "- AddInventoryItem.js"
        echo "- UseInventoryItem.js"
        
        # In a real implementation, this would deploy to Unity Cloud Code
        echo "Cloud Code functions deployment completed!"
    
    - name: Upload Cloud Code Functions
      uses: actions/upload-artifact@v4
      with:
        name: cloudcode-functions
        path: unity/Assets/CloudCode/

  # Job 5: Generate Setup Instructions
  generate-instructions:
    runs-on: ubuntu-latest
    needs: [validate-csv, generate-config, sync-unity-dashboard, deploy-cloudcode]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        name: unity-services-config
    
    - name: Generate Final Setup Instructions
      run: |
        echo "Generating final setup instructions..."
        
        cat > UNITY_ECONOMY_SETUP_COMPLETE.md << 'EOF'
        # Unity Economy Service Setup Complete
        
        ## Summary
        - CSV Items: ${{ needs.validate-csv.outputs.items-count }}
        - Currencies: ${{ needs.validate-csv.outputs.currencies-count }}
        - Inventory Items: ${{ needs.validate-csv.outputs.inventory-count }}
        - Virtual Purchases: ${{ needs.validate-csv.outputs.purchases-count }}
        
        ## Generated Files
        - unity_services_config.json
        - currencies_config.json
        - inventory_config.json
        - purchases_config.json
        - Cloud Code functions
        
        ## Next Steps
        1. Update Project ID and Environment ID in configuration files
        2. Deploy Cloud Code functions to Unity Dashboard
        3. Test the integration in Unity Editor
        4. Verify all items are created correctly
        
        ## Manual Setup Required
        Since Unity Dashboard doesn't have a public API, you'll need to:
        1. Manually create currencies in Unity Dashboard
        2. Manually create inventory items in Unity Dashboard
        3. Manually create virtual purchases in Unity Dashboard
        4. Deploy Cloud Code functions manually
        
        Use the generated configuration files as reference for manual setup.
        EOF
        
        echo "Setup instructions generated successfully!"
    
    - name: Upload Final Instructions
      uses: actions/upload-artifact@v4
      with:
        name: setup-instructions
        path: UNITY_ECONOMY_SETUP_COMPLETE.md

  # Job 6: Notify Completion
  notify-completion:
    runs-on: ubuntu-latest
    needs: [validate-csv, generate-config, sync-unity-dashboard, deploy-cloudcode, generate-instructions]
    if: always()
    steps:
    - name: Notify Success
      if: needs.validate-csv.result == 'success' && needs.generate-config.result == 'success'
      run: |
        echo "✅ Unity Economy Service sync completed successfully!"
        echo "Items processed: ${{ needs.validate-csv.outputs.items-count }}"
        echo "Currencies: ${{ needs.validate-csv.outputs.currencies-count }}"
        echo "Inventory items: ${{ needs.validate-csv.outputs.inventory-count }}"
        echo "Virtual purchases: ${{ needs.validate-csv.outputs.purchases-count }}"
    
    - name: Notify Failure
      if: needs.validate-csv.result == 'failure' || needs.generate-config.result == 'failure'
      run: |
        echo "❌ Unity Economy Service sync failed!"
        echo "Check the logs for details."
    
    - name: Send Slack Notification
      if: always() && env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#economy-sync'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
