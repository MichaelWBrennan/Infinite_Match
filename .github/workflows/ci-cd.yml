name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC for auto-fixes
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Action to perform'
        required: false
        default: 'full-build'
        type: choice
        options:
        - full-build
        - economy-update
        - analytics-report
        - performance-test
        - security-scan
        - dependency-update

env:
  NODE_VERSION: '22'
  UNITY_PROJECT_ID: ${{ secrets.UNITY_PROJECT_ID }}
  UNITY_ENV_ID: ${{ secrets.UNITY_ENV_ID }}
  UNITY_CLIENT_ID: ${{ secrets.UNITY_CLIENT_ID }}
  UNITY_CLIENT_SECRET: ${{ secrets.UNITY_CLIENT_SECRET }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  python-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pylint black isort autopep8
    
    - name: Auto-fix Python code
      run: |
        echo "üîß Auto-fixing Python code..."
        find scripts -name "*.py" -exec autopep8 --in-place --aggressive --aggressive {} \; || true
        isort scripts/ || true
        black scripts/ || true
        echo "‚úÖ Python auto-fix completed"
    
    - name: Lint Python code with flake8
      run: |
        flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Lint Python code with pylint
      run: |
        pylint scripts/ --disable=C0114,C0116
    
    - name: Test Python syntax
      run: |
        find scripts -name "*.py" -exec python -m py_compile {} \;

  node-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        cd server && npm install
    
    - name: Auto-fix JavaScript/TypeScript code
      run: |
        echo "üîß Auto-fixing JavaScript/TypeScript code..."
        npx eslint . --ext .js,.ts --ignore-pattern node_modules/ --ignore-pattern server/node_modules/ --fix || true
        npx prettier --write "**/*.{js,ts,json}" --ignore-path .gitignore || true
        echo "‚úÖ JavaScript/TypeScript auto-fix completed"
    
    - name: Lint JavaScript/TypeScript code
      run: |
        npx eslint . --ext .js,.ts --ignore-pattern node_modules/ --ignore-pattern server/node_modules/
    
    - name: Format JavaScript/TypeScript code
      run: |
        npx prettier --check "**/*.{js,ts,json}" --ignore-path .gitignore
    
    - name: Run tests
      run: |
        npm test || echo "No tests found, continuing..."
        cd server && npm test || echo "No server tests found, continuing..."

  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    needs: [python-checks, node-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run formatting check
        run: npm run format:check

      - name: Run tests
        run: npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check for changes and commit auto-fixes
        if: github.event_name == 'push' || github.event_name == 'schedule'
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "üìù Changes detected, committing auto-fixes..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "ü§ñ Auto-fix: Code style and formatting issues

            - Fixed ESLint issues
            - Applied Prettier formatting
            - Fixed Python code style with autopep8, isort, and black
            - Fixed JSON formatting

            [skip ci]" || true
            git push || true
            echo "‚úÖ Auto-fixes committed and pushed"
          else
            echo "‚úÖ No changes needed - code is already clean"
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run health check
        run: npm run health

      - name: Deploy economy data
        run: npm run economy:deploy

      - name: Deploy Unity Services
        run: npm run unity:deploy

      - name: Run automation
        run: node scripts/automation.js

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run health check
        run: npm run health

      - name: Deploy economy data
        run: npm run economy:deploy

      - name: Deploy Unity Services
        run: npm run unity:deploy

      - name: Run automation
        run: node scripts/automation.js

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: npm run health