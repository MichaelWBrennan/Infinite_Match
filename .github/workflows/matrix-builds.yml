name: Matrix Builds

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of matrix test'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - node-versions
        - os-versions
        - unity-versions
        - browser-versions

env:
  UNITY_PROJECT_ID: ${{ secrets.UNITY_PROJECT_ID }}
  UNITY_ENV_ID: ${{ secrets.UNITY_ENV_ID }}
  UNITY_CLIENT_ID: ${{ secrets.UNITY_CLIENT_ID }}
  UNITY_CLIENT_SECRET: ${{ secrets.UNITY_CLIENT_SECRET }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  node-version-matrix:
    name: Node.js Version Matrix
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'node-versions' || github.event.inputs.test_type == ''
    strategy:
      matrix:
        node-version: ['18', '20', '22', '23']
        include:
          - node-version: '18'
            node-version-name: 'Node.js 18 LTS'
          - node-version: '20'
            node-version-name: 'Node.js 20 LTS'
          - node-version: '22'
            node-version-name: 'Node.js 22 LTS'
          - node-version: '23'
            node-version-name: 'Node.js 23 Current'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version-name }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Run security scan
      run: npm run security

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: node-${{ matrix.node-version }}-test-results
        path: test-results
        retention-days: 30

  os-version-matrix:
    name: OS Version Matrix
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'os-versions' || github.event.inputs.test_type == ''
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['22']
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run build
      run: npm run build

    - name: Upload build results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build-results
        path: build
        retention-days: 30

  unity-version-matrix:
    name: Unity Version Matrix
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unity-versions' || github.event.inputs.test_type == ''
    strategy:
      matrix:
        unity-version: ['2022.3.0f1', '2022.3.20f1', '2023.1.0f1', '2023.2.0f1']
        include:
          - unity-version: '2022.3.0f1'
            unity-version-name: 'Unity 2022.3.0f1'
          - unity-version: '2022.3.20f1'
            unity-version-name: 'Unity 2022.3.20f1'
          - unity-version: '2023.1.0f1'
            unity-version-name: 'Unity 2023.1.0f1'
          - unity-version: '2023.2.0f1'
            unity-version-name: 'Unity 2023.2.0f1'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Cache Unity packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/unity
          Library
          Temp
        key: ${{ runner.os }}-unity-${{ matrix.unity-version }}-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}
        restore-keys: |
          ${{ runner.os }}-unity-${{ matrix.unity-version }}-
          ${{ runner.os }}-unity-

    - name: Setup Unity ${{ matrix.unity-version-name }}
      uses: game-ci/unity-setup@v2
      with:
        unity-version: ${{ matrix.unity-version }}

    - name: Run Unity Tests
      uses: game-ci/unity-test-runner@v3
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity
        testMode: all
        artifactsPath: test-results
        githubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Unity test results
      uses: actions/upload-artifact@v4
      with:
        name: unity-${{ matrix.unity-version }}-test-results
        path: test-results
        retention-days: 30

  browser-version-matrix:
    name: Browser Version Matrix
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'browser-versions' || github.event.inputs.test_type == ''
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            browser-name: 'Chromium'
          - browser: firefox
            browser-name: 'Firefox'
          - browser: webkit
            browser-name: 'WebKit'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Create browser test
      run: |
        cat > browser-test.js << 'EOF'
        const { test, expect } = require('@playwright/test');

        test.describe('Browser Compatibility Tests', () => {
          test('Application works in browser', async ({ page }) => {
            await page.goto('http://localhost:3000');
            await expect(page).toHaveTitle(/Evergreen Match-3/);
            
            // Test API endpoints
            const healthResponse = await page.request.get('http://localhost:3000/api/health');
            expect(healthResponse.status()).toBe(200);
            
            const currenciesResponse = await page.request.get('http://localhost:3000/api/economy/currencies');
            expect(currenciesResponse.status()).toBe(200);
          });
        });
        EOF

    - name: Run browser tests
      run: npx playwright test browser-test.js --project=${{ matrix.browser }} --reporter=html

    - name: Upload browser test results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.browser-name }}-test-results
        path: playwright-report
        retention-days: 30

  python-version-matrix:
    name: Python Version Matrix
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'python-versions' || github.event.inputs.test_type == ''
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - python-version: '3.9'
            python-version-name: 'Python 3.9'
          - python-version: '3.10'
            python-version-name: 'Python 3.10'
          - python-version: '3.11'
            python-version-name: 'Python 3.11'
          - python-version: '3.12'
            python-version-name: 'Python 3.12'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version-name }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python tests
      run: |
        python -m pytest scripts/ -v --tb=short

    - name: Run Python linting
      run: |
        flake8 scripts/ --max-line-length=100
        pylint scripts/ --disable=C0114,C0116

    - name: Upload Python test results
      uses: actions/upload-artifact@v4
      with:
        name: python-${{ matrix.python-version }}-test-results
        path: test-results
        retention-days: 30

  matrix-summary:
    name: Matrix Build Summary
    runs-on: ubuntu-latest
    needs: [node-version-matrix, os-version-matrix, unity-version-matrix, browser-version-matrix, python-version-matrix]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all matrix test results
      uses: actions/download-artifact@v4
      with:
        path: matrix-test-results

    - name: Generate matrix build report
      run: |
        echo "# Matrix Build Results" > matrix-build-report.md
        echo "" >> matrix-build-report.md
        echo "## Test Summary" >> matrix-build-report.md
        echo "- Node.js Version Matrix: ${{ needs.node-version-matrix.result }}" >> matrix-build-report.md
        echo "- OS Version Matrix: ${{ needs.os-version-matrix.result }}" >> matrix-build-report.md
        echo "- Unity Version Matrix: ${{ needs.unity-version-matrix.result }}" >> matrix-build-report.md
        echo "- Browser Version Matrix: ${{ needs.browser-version-matrix.result }}" >> matrix-build-report.md
        echo "- Python Version Matrix: ${{ needs.python-version-matrix.result }}" >> matrix-build-report.md
        echo "" >> matrix-build-report.md
        echo "## Matrix Coverage" >> matrix-build-report.md
        echo "- Node.js versions: 18, 20, 22, 23" >> matrix-build-report.md
        echo "- OS versions: Ubuntu, Windows, macOS" >> matrix-build-report.md
        echo "- Unity versions: 2022.3.0f1, 2022.3.20f1, 2023.1.0f1, 2023.2.0f1" >> matrix-build-report.md
        echo "- Browser versions: Chromium, Firefox, WebKit" >> matrix-build-report.md
        echo "- Python versions: 3.9, 3.10, 3.11, 3.12" >> matrix-build-report.md

    - name: Upload matrix build report
      uses: actions/upload-artifact@v4
      with:
        name: matrix-build-report
        path: matrix-build-report.md
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('matrix-build-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });